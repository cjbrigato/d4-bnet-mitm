package bgs.protocol.account.v1;
import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/rpc_types.proto";

message ResolveAccountRequest {
	optional .bgs.protocol.account.v1.AccountReference ref = 1;
	optional bool fetch_id = 12;
}
message ResolveAccountResponse {
	optional .bgs.protocol.account.v1.AccountId id = 12;
}
message GameAccountFlagUpdateRequest {
	optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
	optional uint64 flag = 2;
	optional bool active = 3;
}
message SubscriptionUpdateRequest {
	repeated .bgs.protocol.account.v1.SubscriberReference ref = 2;
}
message SubscriptionUpdateResponse {
	repeated .bgs.protocol.account.v1.SubscriberReference ref = 1;
}
message GetAccountStateRequest {
	optional .bgs.protocol.EntityId entity_id = 1;
	optional uint32 program = 2;
	optional uint32 region = 3;
	optional .bgs.protocol.account.v1.AccountFieldOptions options = 10;
	optional .bgs.protocol.account.v1.AccountFieldTags tags = 11;
}
message GetAccountStateResponse {
	optional .bgs.protocol.account.v1.AccountState state = 1;
	optional .bgs.protocol.account.v1.AccountFieldTags tags = 2;
}
message GetSignedAccountStateRequest {
	optional .bgs.protocol.account.v1.AccountId account = 1;
}
message GetSignedAccountStateResponse {
	optional string token = 1;
}
message GetGameAccountStateRequest {
	optional .bgs.protocol.EntityId account_id = 1;
	optional .bgs.protocol.EntityId game_account_id = 2;
	optional .bgs.protocol.account.v1.GameAccountFieldOptions options = 10;
	optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 11;
}
message GetGameAccountStateResponse {
	optional .bgs.protocol.account.v1.GameAccountState state = 1;
	optional .bgs.protocol.account.v1.GameAccountFieldTags tags = 2;
}
message GetLicensesRequest {
	optional .bgs.protocol.EntityId target_id = 1;
	optional bool fetch_account_licenses = 2;
	optional bool fetch_game_account_licenses = 3;
	optional bool fetch_dynamic_account_licenses = 4;
	optional fixed32 program = 5;
	optional bool exclude_unknown_program = 6 [default = false];
}
message GetLicensesResponse {
	repeated .bgs.protocol.account.v1.AccountLicense licenses = 1;
}
message GetGameSessionInfoRequest {
	optional .bgs.protocol.EntityId entity_id = 1;
}
message GetGameSessionInfoResponse {
	optional .bgs.protocol.account.v1.GameSessionInfo session_info = 2;
}
message GetGameTimeRemainingInfoRequest {
	optional .bgs.protocol.EntityId game_account_id = 1;
	optional .bgs.protocol.EntityId account_id = 2;
	optional string benefactor_id = 3;
}
message GetGameTimeRemainingInfoResponse {
	optional .bgs.protocol.account.v1.GameTimeRemainingInfo game_time_remaining_info = 1;
}
message GetCAISInfoRequest {
	optional .bgs.protocol.EntityId entity_id = 1;
}
message GetCAISInfoResponse {
	optional .bgs.protocol.account.v1.CAIS cais_info = 1;
}
message GetAuthorizedDataRequest {
	optional .bgs.protocol.EntityId entity_id = 1;
	repeated string tag = 2;
	optional bool privileged_network = 3;
}
message GetAuthorizedDataResponse {
	repeated .bgs.protocol.account.v1.AuthorizedData data = 1;
}
message GetAccountInfoRequest {
	optional .bgs.protocol.EntityId account_id = 1;
}
message GetAccountInfoResponse {
	optional .bgs.protocol.account.v1.AccountInfo account_info = 1;
}
message GetAccountPlatformRestrictionsRequest {
	optional .bgs.protocol.EntityId account_id = 1;
}
message GetAccountPlatformRestrictionsResponse {
	optional .bgs.protocol.account.v1.AccountPlatformRestrictionInfo restriction_info = 1;
}
message AccountStateNotification {
	optional .bgs.protocol.account.v1.AccountState account_state = 1;
	optional uint64 subscriber_id = 2;
	optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
	optional bool subscription_completed = 4;
}
message GameAccountStateNotification {
	optional .bgs.protocol.account.v1.GameAccountState game_account_state = 1;
	optional uint64 subscriber_id = 2;
	optional .bgs.protocol.account.v1.GameAccountFieldTags game_account_tags = 3;
	optional bool subscription_completed = 4;
}
message GameAccountNotification {
	repeated .bgs.protocol.account.v1.GameAccountList game_accounts = 1;
	optional uint64 subscriber_id = 2;
	optional .bgs.protocol.account.v1.AccountFieldTags account_tags = 3;
}
message GameAccountSessionNotification {
	optional .bgs.protocol.account.v1.GameAccountHandle game_account = 1;
	optional .bgs.protocol.account.v1.GameSessionUpdateInfo session_info = 2;
}
service AccountService {
	rpc ResolveAccount (.bgs.protocol.account.v1.ResolveAccountRequest) returns (.bgs.protocol.account.v1.ResolveAccountResponse);
	rpc Subscribe (.bgs.protocol.account.v1.SubscriptionUpdateRequest) returns (.bgs.protocol.account.v1.SubscriptionUpdateResponse);
	rpc Unsubscribe (.bgs.protocol.account.v1.SubscriptionUpdateRequest) returns (.bgs.protocol.NoData);
	rpc GetAccountState (.bgs.protocol.account.v1.GetAccountStateRequest) returns (.bgs.protocol.account.v1.GetAccountStateResponse);
	rpc GetGameAccountState (.bgs.protocol.account.v1.GetGameAccountStateRequest) returns (.bgs.protocol.account.v1.GetGameAccountStateResponse);
	rpc GetLicenses (.bgs.protocol.account.v1.GetLicensesRequest) returns (.bgs.protocol.account.v1.GetLicensesResponse);
	rpc GetGameTimeRemainingInfo (.bgs.protocol.account.v1.GetGameTimeRemainingInfoRequest) returns (.bgs.protocol.account.v1.GetGameTimeRemainingInfoResponse);
	rpc GetGameSessionInfo (.bgs.protocol.account.v1.GetGameSessionInfoRequest) returns (.bgs.protocol.account.v1.GetGameSessionInfoResponse);
	rpc GetCAISInfo (.bgs.protocol.account.v1.GetCAISInfoRequest) returns (.bgs.protocol.account.v1.GetCAISInfoResponse);
	rpc GetAuthorizedData (.bgs.protocol.account.v1.GetAuthorizedDataRequest) returns (.bgs.protocol.account.v1.GetAuthorizedDataResponse);
	rpc GetSignedAccountState (.bgs.protocol.account.v1.GetSignedAccountStateRequest) returns (.bgs.protocol.account.v1.GetSignedAccountStateResponse);
	rpc GetAccountInfo (.bgs.protocol.account.v1.GetAccountInfoRequest) returns (.bgs.protocol.account.v1.GetAccountInfoResponse);
	rpc GetAccountPlatformRestrictions (.bgs.protocol.account.v1.GetAccountPlatformRestrictionsRequest) returns (.bgs.protocol.account.v1.GetAccountPlatformRestrictionsResponse);
}
service AccountListener {
	rpc OnAccountStateUpdated (.bgs.protocol.account.v1.AccountStateNotification) returns (.bgs.protocol.NO_RESPONSE);
	rpc OnGameAccountStateUpdated (.bgs.protocol.account.v1.GameAccountStateNotification) returns (.bgs.protocol.NO_RESPONSE);
	rpc OnGameAccountsUpdated (.bgs.protocol.account.v1.GameAccountNotification) returns (.bgs.protocol.NO_RESPONSE);
	rpc OnGameSessionUpdated (.bgs.protocol.account.v1.GameAccountSessionNotification) returns (.bgs.protocol.NO_RESPONSE);
}
option go_package = "github.com/cjbrigato/d4-bnet-mitm/bnet/bgs/protocol/account/v1";
