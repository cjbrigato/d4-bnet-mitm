// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: bgs/low/pb/client/club_stream.proto

package v1

import (
	protocol "github.com/cjbrigato/d4-bnet-mitm/bnet/bgs/protocol"
	v2 "github.com/cjbrigato/d4-bnet-mitm/bnet/bgs/protocol/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId []uint64 `protobuf:"varint,1,rep,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *StreamPosition) Reset() {
	*x = StreamPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPosition) ProtoMessage() {}

func (x *StreamPosition) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPosition.ProtoReflect.Descriptor instead.
func (*StreamPosition) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StreamPosition) GetStreamId() []uint64 {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type StreamAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role []uint32 `protobuf:"varint,1,rep,name=role" json:"role,omitempty"`
}

func (x *StreamAccess) Reset() {
	*x = StreamAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAccess) ProtoMessage() {}

func (x *StreamAccess) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAccess.ProtoReflect.Descriptor instead.
func (*StreamAccess) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StreamAccess) GetRole() []uint32 {
	if x != nil {
		return x.Role
	}
	return nil
}

type CreateStreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute  []*v2.Attribute   `protobuf:"bytes,1,rep,name=attribute" json:"attribute,omitempty"`
	Name       *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Subject    *string           `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Access     *StreamAccess     `protobuf:"bytes,4,opt,name=access" json:"access,omitempty"`
	VoiceLevel *StreamVoiceLevel `protobuf:"varint,5,opt,name=voice_level,json=voiceLevel,enum=bgs.protocol.club.v1.StreamVoiceLevel" json:"voice_level,omitempty"`
}

func (x *CreateStreamOptions) Reset() {
	*x = CreateStreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamOptions) ProtoMessage() {}

func (x *CreateStreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamOptions.ProtoReflect.Descriptor instead.
func (*CreateStreamOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{2}
}

func (x *CreateStreamOptions) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *CreateStreamOptions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateStreamOptions) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *CreateStreamOptions) GetAccess() *StreamAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *CreateStreamOptions) GetVoiceLevel() StreamVoiceLevel {
	if x != nil && x.VoiceLevel != nil {
		return *x.VoiceLevel
	}
	return StreamVoiceLevel_VOICE_LEVEL_DISABLED
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId       *uint64           `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	Id           *uint64           `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Attribute    []*v2.Attribute   `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	Name         *string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Subject      *string           `protobuf:"bytes,5,opt,name=subject" json:"subject,omitempty"`
	Access       *StreamAccess     `protobuf:"bytes,6,opt,name=access" json:"access,omitempty"`
	VoiceLevel   *StreamVoiceLevel `protobuf:"varint,7,opt,name=voice_level,json=voiceLevel,enum=bgs.protocol.club.v1.StreamVoiceLevel" json:"voice_level,omitempty"`
	CreationTime *uint64           `protobuf:"varint,8,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{3}
}

func (x *Stream) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *Stream) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Stream) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Stream) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Stream) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Stream) GetAccess() *StreamAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Stream) GetVoiceLevel() StreamVoiceLevel {
	if x != nil && x.VoiceLevel != nil {
		return *x.VoiceLevel
	}
	return StreamVoiceLevel_VOICE_LEVEL_DISABLED
}

func (x *Stream) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

type StreamDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *StreamDescription) Reset() {
	*x = StreamDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDescription) ProtoMessage() {}

func (x *StreamDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDescription.ProtoReflect.Descriptor instead.
func (*StreamDescription) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{4}
}

func (x *StreamDescription) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StreamDescription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MentionContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All      *bool       `protobuf:"varint,1,opt,name=all" json:"all,omitempty"`
	Here     *bool       `protobuf:"varint,2,opt,name=here" json:"here,omitempty"`
	MemberId []*MemberId `protobuf:"bytes,3,rep,name=member_id,json=memberId" json:"member_id,omitempty"`
	Role     []uint32    `protobuf:"varint,4,rep,name=role" json:"role,omitempty"`
}

func (x *MentionContent) Reset() {
	*x = MentionContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionContent) ProtoMessage() {}

func (x *MentionContent) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionContent.ProtoReflect.Descriptor instead.
func (*MentionContent) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{5}
}

func (x *MentionContent) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

func (x *MentionContent) GetHere() bool {
	if x != nil && x.Here != nil {
		return *x.Here
	}
	return false
}

func (x *MentionContent) GetMemberId() []*MemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *MentionContent) GetRole() []uint32 {
	if x != nil {
		return x.Role
	}
	return nil
}

type CreateMessageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string         `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Mention *MentionContent `protobuf:"bytes,3,opt,name=mention" json:"mention,omitempty"`
}

func (x *CreateMessageOptions) Reset() {
	*x = CreateMessageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageOptions) ProtoMessage() {}

func (x *CreateMessageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageOptions.ProtoReflect.Descriptor instead.
func (*CreateMessageOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{6}
}

func (x *CreateMessageOptions) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CreateMessageOptions) GetMention() *MentionContent {
	if x != nil {
		return x.Mention
	}
	return nil
}

type ClubStreamMessageContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []*StreamMessage `protobuf:"bytes,1,rep,name=message" json:"message,omitempty"`
}

func (x *ClubStreamMessageContainer) Reset() {
	*x = ClubStreamMessageContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubStreamMessageContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubStreamMessageContainer) ProtoMessage() {}

func (x *ClubStreamMessageContainer) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubStreamMessageContainer.ProtoReflect.Descriptor instead.
func (*ClubStreamMessageContainer) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{7}
}

func (x *ClubStreamMessageContainer) GetMessage() []*StreamMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ContentChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  *string               `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	Embed    []*protocol.EmbedInfo `protobuf:"bytes,6,rep,name=embed" json:"embed,omitempty"`
	Mention  *MentionContent       `protobuf:"bytes,7,opt,name=mention" json:"mention,omitempty"`
	EditTime *uint64               `protobuf:"varint,8,opt,name=edit_time,json=editTime" json:"edit_time,omitempty"`
}

func (x *ContentChain) Reset() {
	*x = ContentChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentChain) ProtoMessage() {}

func (x *ContentChain) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentChain.ProtoReflect.Descriptor instead.
func (*ContentChain) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{8}
}

func (x *ContentChain) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ContentChain) GetEmbed() []*protocol.EmbedInfo {
	if x != nil {
		return x.Embed
	}
	return nil
}

func (x *ContentChain) GetMention() *MentionContent {
	if x != nil {
		return x.Mention
	}
	return nil
}

func (x *ContentChain) GetEditTime() uint64 {
	if x != nil && x.EditTime != nil {
		return *x.EditTime
	}
	return 0
}

type StreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *protocol.MessageId `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Author       *MemberDescription  `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	ContentChain []*ContentChain     `protobuf:"bytes,6,rep,name=content_chain,json=contentChain" json:"content_chain,omitempty"`
	Destroyer    *MemberDescription  `protobuf:"bytes,15,opt,name=destroyer" json:"destroyer,omitempty"`
	Destroyed    *bool               `protobuf:"varint,16,opt,name=destroyed" json:"destroyed,omitempty"`
	DestroyTime  *uint64             `protobuf:"varint,17,opt,name=destroy_time,json=destroyTime" json:"destroy_time,omitempty"`
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{9}
}

func (x *StreamMessage) GetId() *protocol.MessageId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StreamMessage) GetAuthor() *MemberDescription {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *StreamMessage) GetContentChain() []*ContentChain {
	if x != nil {
		return x.ContentChain
	}
	return nil
}

func (x *StreamMessage) GetDestroyer() *MemberDescription {
	if x != nil {
		return x.Destroyer
	}
	return nil
}

func (x *StreamMessage) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

func (x *StreamMessage) GetDestroyTime() uint64 {
	if x != nil && x.DestroyTime != nil {
		return *x.DestroyTime
	}
	return 0
}

type StreamMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId    *uint64                `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	StreamId  *uint64                `protobuf:"varint,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	MessageId *protocol.MessageId    `protobuf:"bytes,3,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Author    *MemberDescription     `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	Destroyed *bool                  `protobuf:"varint,5,opt,name=destroyed" json:"destroyed,omitempty"`
	MentionId *protocol.TimeSeriesId `protobuf:"bytes,6,opt,name=mention_id,json=mentionId" json:"mention_id,omitempty"`
	MemberId  *MemberId              `protobuf:"bytes,7,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Message   *StreamMessage         `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	ClubType  *UniqueClubType        `protobuf:"bytes,9,opt,name=club_type,json=clubType" json:"club_type,omitempty"`
}

func (x *StreamMention) Reset() {
	*x = StreamMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMention) ProtoMessage() {}

func (x *StreamMention) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMention.ProtoReflect.Descriptor instead.
func (*StreamMention) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{10}
}

func (x *StreamMention) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *StreamMention) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamMention) GetMessageId() *protocol.MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *StreamMention) GetAuthor() *MemberDescription {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *StreamMention) GetDestroyed() bool {
	if x != nil && x.Destroyed != nil {
		return *x.Destroyed
	}
	return false
}

func (x *StreamMention) GetMentionId() *protocol.TimeSeriesId {
	if x != nil {
		return x.MentionId
	}
	return nil
}

func (x *StreamMention) GetMemberId() *MemberId {
	if x != nil {
		return x.MemberId
	}
	return nil
}

func (x *StreamMention) GetMessage() *StreamMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *StreamMention) GetClubType() *UniqueClubType {
	if x != nil {
		return x.ClubType
	}
	return nil
}

type StreamView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId   *uint64              `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	StreamId *uint64              `protobuf:"varint,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Marker   *protocol.ViewMarker `protobuf:"bytes,3,opt,name=marker" json:"marker,omitempty"`
}

func (x *StreamView) Reset() {
	*x = StreamView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamView) ProtoMessage() {}

func (x *StreamView) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamView.ProtoReflect.Descriptor instead.
func (*StreamView) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{11}
}

func (x *StreamView) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *StreamView) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamView) GetMarker() *protocol.ViewMarker {
	if x != nil {
		return x.Marker
	}
	return nil
}

type StreamAdvanceViewTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ViewTime *uint64 `protobuf:"varint,2,opt,name=view_time,json=viewTime" json:"view_time,omitempty"`
}

func (x *StreamAdvanceViewTime) Reset() {
	*x = StreamAdvanceViewTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAdvanceViewTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAdvanceViewTime) ProtoMessage() {}

func (x *StreamAdvanceViewTime) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAdvanceViewTime.ProtoReflect.Descriptor instead.
func (*StreamAdvanceViewTime) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{12}
}

func (x *StreamAdvanceViewTime) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamAdvanceViewTime) GetViewTime() uint64 {
	if x != nil && x.ViewTime != nil {
		return *x.ViewTime
	}
	return 0
}

type StreamEventTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId  *uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	EventTime *uint64 `protobuf:"varint,2,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
}

func (x *StreamEventTime) Reset() {
	*x = StreamEventTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEventTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventTime) ProtoMessage() {}

func (x *StreamEventTime) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventTime.ProtoReflect.Descriptor instead.
func (*StreamEventTime) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{13}
}

func (x *StreamEventTime) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamEventTime) GetEventTime() uint64 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

type StreamMentionView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId   *uint64              `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	StreamId *uint64              `protobuf:"varint,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Marker   *protocol.ViewMarker `protobuf:"bytes,3,opt,name=marker" json:"marker,omitempty"`
}

func (x *StreamMentionView) Reset() {
	*x = StreamMentionView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMentionView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMentionView) ProtoMessage() {}

func (x *StreamMentionView) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMentionView.ProtoReflect.Descriptor instead.
func (*StreamMentionView) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{14}
}

func (x *StreamMentionView) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *StreamMentionView) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamMentionView) GetMarker() *protocol.ViewMarker {
	if x != nil {
		return x.Marker
	}
	return nil
}

type StreamStateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute  []*v2.Attribute   `protobuf:"bytes,1,rep,name=attribute" json:"attribute,omitempty"`
	Name       *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Subject    *string           `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Access     *StreamAccess     `protobuf:"bytes,4,opt,name=access" json:"access,omitempty"`
	VoiceLevel *StreamVoiceLevel `protobuf:"varint,5,opt,name=voice_level,json=voiceLevel,enum=bgs.protocol.club.v1.StreamVoiceLevel" json:"voice_level,omitempty"`
}

func (x *StreamStateOptions) Reset() {
	*x = StreamStateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStateOptions) ProtoMessage() {}

func (x *StreamStateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStateOptions.ProtoReflect.Descriptor instead.
func (*StreamStateOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{15}
}

func (x *StreamStateOptions) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *StreamStateOptions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StreamStateOptions) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *StreamStateOptions) GetAccess() *StreamAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *StreamStateOptions) GetVoiceLevel() StreamVoiceLevel {
	if x != nil && x.VoiceLevel != nil {
		return *x.VoiceLevel
	}
	return StreamVoiceLevel_VOICE_LEVEL_DISABLED
}

type StreamStateAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId                  *uint64           `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Attribute                 []*v2.Attribute   `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
	Name                      *string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Subject                   *string           `protobuf:"bytes,4,opt,name=subject" json:"subject,omitempty"`
	Access                    *StreamAccess     `protobuf:"bytes,5,opt,name=access" json:"access,omitempty"`
	StreamSubscriptionRemoved *bool             `protobuf:"varint,6,opt,name=stream_subscription_removed,json=streamSubscriptionRemoved" json:"stream_subscription_removed,omitempty"`
	VoiceLevel                *StreamVoiceLevel `protobuf:"varint,7,opt,name=voice_level,json=voiceLevel,enum=bgs.protocol.club.v1.StreamVoiceLevel" json:"voice_level,omitempty"`
}

func (x *StreamStateAssignment) Reset() {
	*x = StreamStateAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStateAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStateAssignment) ProtoMessage() {}

func (x *StreamStateAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStateAssignment.ProtoReflect.Descriptor instead.
func (*StreamStateAssignment) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{16}
}

func (x *StreamStateAssignment) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamStateAssignment) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *StreamStateAssignment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StreamStateAssignment) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *StreamStateAssignment) GetAccess() *StreamAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *StreamStateAssignment) GetStreamSubscriptionRemoved() bool {
	if x != nil && x.StreamSubscriptionRemoved != nil {
		return *x.StreamSubscriptionRemoved
	}
	return false
}

func (x *StreamStateAssignment) GetVoiceLevel() StreamVoiceLevel {
	if x != nil && x.VoiceLevel != nil {
		return *x.VoiceLevel
	}
	return StreamVoiceLevel_VOICE_LEVEL_DISABLED
}

type StreamTypingIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId  *MemberId                 `protobuf:"bytes,1,opt,name=author_id,json=authorId" json:"author_id,omitempty"`
	Indicator *protocol.TypingIndicator `protobuf:"varint,2,opt,name=indicator,enum=bgs.protocol.TypingIndicator" json:"indicator,omitempty"`
	Epoch     *uint64                   `protobuf:"varint,3,opt,name=epoch" json:"epoch,omitempty"`
}

func (x *StreamTypingIndicator) Reset() {
	*x = StreamTypingIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTypingIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTypingIndicator) ProtoMessage() {}

func (x *StreamTypingIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTypingIndicator.ProtoReflect.Descriptor instead.
func (*StreamTypingIndicator) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_stream_proto_rawDescGZIP(), []int{17}
}

func (x *StreamTypingIndicator) GetAuthorId() *MemberId {
	if x != nil {
		return x.AuthorId
	}
	return nil
}

func (x *StreamTypingIndicator) GetIndicator() protocol.TypingIndicator {
	if x != nil && x.Indicator != nil {
		return *x.Indicator
	}
	return protocol.TypingIndicator(0)
}

func (x *StreamTypingIndicator) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

var File_bgs_low_pb_client_club_stream_proto protoreflect.FileDescriptor

var file_bgs_low_pb_client_club_stream_proto_rawDesc = []byte{
	0x0a, 0x23, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x62, 0x67, 0x73,
	0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63,
	0x6c, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f,
	0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62,
	0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f,
	0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x22, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc3, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47,
	0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x11,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x65, 0x72, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x70, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x64, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x22, 0x51, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x22, 0x81, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3a, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xe1, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3e, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6a, 0x62, 0x72, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x64, 0x34, 0x2d, 0x62, 0x6e,
	0x65, 0x74, 0x2d, 0x6d, 0x69, 0x74, 0x6d, 0x2f, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x62, 0x67, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x2f, 0x76,
	0x31,
}

var (
	file_bgs_low_pb_client_club_stream_proto_rawDescOnce sync.Once
	file_bgs_low_pb_client_club_stream_proto_rawDescData = file_bgs_low_pb_client_club_stream_proto_rawDesc
)

func file_bgs_low_pb_client_club_stream_proto_rawDescGZIP() []byte {
	file_bgs_low_pb_client_club_stream_proto_rawDescOnce.Do(func() {
		file_bgs_low_pb_client_club_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgs_low_pb_client_club_stream_proto_rawDescData)
	})
	return file_bgs_low_pb_client_club_stream_proto_rawDescData
}

var file_bgs_low_pb_client_club_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_bgs_low_pb_client_club_stream_proto_goTypes = []interface{}{
	(*StreamPosition)(nil),             // 0: bgs.protocol.club.v1.StreamPosition
	(*StreamAccess)(nil),               // 1: bgs.protocol.club.v1.StreamAccess
	(*CreateStreamOptions)(nil),        // 2: bgs.protocol.club.v1.CreateStreamOptions
	(*Stream)(nil),                     // 3: bgs.protocol.club.v1.Stream
	(*StreamDescription)(nil),          // 4: bgs.protocol.club.v1.StreamDescription
	(*MentionContent)(nil),             // 5: bgs.protocol.club.v1.MentionContent
	(*CreateMessageOptions)(nil),       // 6: bgs.protocol.club.v1.CreateMessageOptions
	(*ClubStreamMessageContainer)(nil), // 7: bgs.protocol.club.v1.ClubStreamMessageContainer
	(*ContentChain)(nil),               // 8: bgs.protocol.club.v1.ContentChain
	(*StreamMessage)(nil),              // 9: bgs.protocol.club.v1.StreamMessage
	(*StreamMention)(nil),              // 10: bgs.protocol.club.v1.StreamMention
	(*StreamView)(nil),                 // 11: bgs.protocol.club.v1.StreamView
	(*StreamAdvanceViewTime)(nil),      // 12: bgs.protocol.club.v1.StreamAdvanceViewTime
	(*StreamEventTime)(nil),            // 13: bgs.protocol.club.v1.StreamEventTime
	(*StreamMentionView)(nil),          // 14: bgs.protocol.club.v1.StreamMentionView
	(*StreamStateOptions)(nil),         // 15: bgs.protocol.club.v1.StreamStateOptions
	(*StreamStateAssignment)(nil),      // 16: bgs.protocol.club.v1.StreamStateAssignment
	(*StreamTypingIndicator)(nil),      // 17: bgs.protocol.club.v1.StreamTypingIndicator
	(*v2.Attribute)(nil),               // 18: bgs.protocol.v2.Attribute
	(StreamVoiceLevel)(0),              // 19: bgs.protocol.club.v1.StreamVoiceLevel
	(*MemberId)(nil),                   // 20: bgs.protocol.club.v1.MemberId
	(*protocol.EmbedInfo)(nil),         // 21: bgs.protocol.EmbedInfo
	(*protocol.MessageId)(nil),         // 22: bgs.protocol.MessageId
	(*MemberDescription)(nil),          // 23: bgs.protocol.club.v1.MemberDescription
	(*protocol.TimeSeriesId)(nil),      // 24: bgs.protocol.TimeSeriesId
	(*UniqueClubType)(nil),             // 25: bgs.protocol.club.v1.UniqueClubType
	(*protocol.ViewMarker)(nil),        // 26: bgs.protocol.ViewMarker
	(protocol.TypingIndicator)(0),      // 27: bgs.protocol.TypingIndicator
}
var file_bgs_low_pb_client_club_stream_proto_depIdxs = []int32{
	18, // 0: bgs.protocol.club.v1.CreateStreamOptions.attribute:type_name -> bgs.protocol.v2.Attribute
	1,  // 1: bgs.protocol.club.v1.CreateStreamOptions.access:type_name -> bgs.protocol.club.v1.StreamAccess
	19, // 2: bgs.protocol.club.v1.CreateStreamOptions.voice_level:type_name -> bgs.protocol.club.v1.StreamVoiceLevel
	18, // 3: bgs.protocol.club.v1.Stream.attribute:type_name -> bgs.protocol.v2.Attribute
	1,  // 4: bgs.protocol.club.v1.Stream.access:type_name -> bgs.protocol.club.v1.StreamAccess
	19, // 5: bgs.protocol.club.v1.Stream.voice_level:type_name -> bgs.protocol.club.v1.StreamVoiceLevel
	20, // 6: bgs.protocol.club.v1.MentionContent.member_id:type_name -> bgs.protocol.club.v1.MemberId
	5,  // 7: bgs.protocol.club.v1.CreateMessageOptions.mention:type_name -> bgs.protocol.club.v1.MentionContent
	9,  // 8: bgs.protocol.club.v1.ClubStreamMessageContainer.message:type_name -> bgs.protocol.club.v1.StreamMessage
	21, // 9: bgs.protocol.club.v1.ContentChain.embed:type_name -> bgs.protocol.EmbedInfo
	5,  // 10: bgs.protocol.club.v1.ContentChain.mention:type_name -> bgs.protocol.club.v1.MentionContent
	22, // 11: bgs.protocol.club.v1.StreamMessage.id:type_name -> bgs.protocol.MessageId
	23, // 12: bgs.protocol.club.v1.StreamMessage.author:type_name -> bgs.protocol.club.v1.MemberDescription
	8,  // 13: bgs.protocol.club.v1.StreamMessage.content_chain:type_name -> bgs.protocol.club.v1.ContentChain
	23, // 14: bgs.protocol.club.v1.StreamMessage.destroyer:type_name -> bgs.protocol.club.v1.MemberDescription
	22, // 15: bgs.protocol.club.v1.StreamMention.message_id:type_name -> bgs.protocol.MessageId
	23, // 16: bgs.protocol.club.v1.StreamMention.author:type_name -> bgs.protocol.club.v1.MemberDescription
	24, // 17: bgs.protocol.club.v1.StreamMention.mention_id:type_name -> bgs.protocol.TimeSeriesId
	20, // 18: bgs.protocol.club.v1.StreamMention.member_id:type_name -> bgs.protocol.club.v1.MemberId
	9,  // 19: bgs.protocol.club.v1.StreamMention.message:type_name -> bgs.protocol.club.v1.StreamMessage
	25, // 20: bgs.protocol.club.v1.StreamMention.club_type:type_name -> bgs.protocol.club.v1.UniqueClubType
	26, // 21: bgs.protocol.club.v1.StreamView.marker:type_name -> bgs.protocol.ViewMarker
	26, // 22: bgs.protocol.club.v1.StreamMentionView.marker:type_name -> bgs.protocol.ViewMarker
	18, // 23: bgs.protocol.club.v1.StreamStateOptions.attribute:type_name -> bgs.protocol.v2.Attribute
	1,  // 24: bgs.protocol.club.v1.StreamStateOptions.access:type_name -> bgs.protocol.club.v1.StreamAccess
	19, // 25: bgs.protocol.club.v1.StreamStateOptions.voice_level:type_name -> bgs.protocol.club.v1.StreamVoiceLevel
	18, // 26: bgs.protocol.club.v1.StreamStateAssignment.attribute:type_name -> bgs.protocol.v2.Attribute
	1,  // 27: bgs.protocol.club.v1.StreamStateAssignment.access:type_name -> bgs.protocol.club.v1.StreamAccess
	19, // 28: bgs.protocol.club.v1.StreamStateAssignment.voice_level:type_name -> bgs.protocol.club.v1.StreamVoiceLevel
	20, // 29: bgs.protocol.club.v1.StreamTypingIndicator.author_id:type_name -> bgs.protocol.club.v1.MemberId
	27, // 30: bgs.protocol.club.v1.StreamTypingIndicator.indicator:type_name -> bgs.protocol.TypingIndicator
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_bgs_low_pb_client_club_stream_proto_init() }
func file_bgs_low_pb_client_club_stream_proto_init() {
	if File_bgs_low_pb_client_club_stream_proto != nil {
		return
	}
	file_bgs_low_pb_client_club_enum_proto_init()
	file_bgs_low_pb_client_club_member_proto_init()
	file_bgs_low_pb_client_club_type_proto_init()
	file_bgs_low_pb_client_club_member_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgs_low_pb_client_club_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubStreamMessageContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAdvanceViewTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEventTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMentionView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStateAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTypingIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgs_low_pb_client_club_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bgs_low_pb_client_club_stream_proto_goTypes,
		DependencyIndexes: file_bgs_low_pb_client_club_stream_proto_depIdxs,
		MessageInfos:      file_bgs_low_pb_client_club_stream_proto_msgTypes,
	}.Build()
	File_bgs_low_pb_client_club_stream_proto = out.File
	file_bgs_low_pb_client_club_stream_proto_rawDesc = nil
	file_bgs_low_pb_client_club_stream_proto_goTypes = nil
	file_bgs_low_pb_client_club_stream_proto_depIdxs = nil
}
