// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: bgs/low/pb/client/session_service.proto

package v1

import (
	protocol "github.com/cjbrigato/logprox/bnet/bgs/protocol"
	v1 "github.com/cjbrigato/logprox/bnet/bgs/protocol/account/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity           *v1.Identity    `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Platform           *uint32         `protobuf:"fixed32,2,opt,name=platform" json:"platform,omitempty"`
	Locale             *uint32         `protobuf:"fixed32,3,opt,name=locale" json:"locale,omitempty"`
	ClientAddress      *string         `protobuf:"bytes,4,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
	ApplicationVersion *int32          `protobuf:"varint,5,opt,name=application_version,json=applicationVersion" json:"application_version,omitempty"`
	UserAgent          *string         `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	SessionKey         []byte          `protobuf:"bytes,7,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	Options            *SessionOptions `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
	RequiresMarkAlive  *bool           `protobuf:"varint,9,opt,name=requires_mark_alive,json=requiresMarkAlive,def=0" json:"requires_mark_alive,omitempty"`
	MacAddress         *string         `protobuf:"bytes,10,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	AuthPlatform       *string         `protobuf:"bytes,11,opt,name=auth_platform,json=authPlatform" json:"auth_platform,omitempty"`
}

// Default values for CreateSessionRequest fields.
const (
	Default_CreateSessionRequest_RequiresMarkAlive = bool(false)
)

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *CreateSessionRequest) GetPlatform() uint32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *CreateSessionRequest) GetLocale() uint32 {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return 0
}

func (x *CreateSessionRequest) GetClientAddress() string {
	if x != nil && x.ClientAddress != nil {
		return *x.ClientAddress
	}
	return ""
}

func (x *CreateSessionRequest) GetApplicationVersion() int32 {
	if x != nil && x.ApplicationVersion != nil {
		return *x.ApplicationVersion
	}
	return 0
}

func (x *CreateSessionRequest) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *CreateSessionRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *CreateSessionRequest) GetOptions() *SessionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateSessionRequest) GetRequiresMarkAlive() bool {
	if x != nil && x.RequiresMarkAlive != nil {
		return *x.RequiresMarkAlive
	}
	return Default_CreateSessionRequest_RequiresMarkAlive
}

func (x *CreateSessionRequest) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *CreateSessionRequest) GetAuthPlatform() string {
	if x != nil && x.AuthPlatform != nil {
		return *x.AuthPlatform
	}
	return ""
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	TimeoutS  *uint32 `protobuf:"varint,2,opt,name=timeout_s,json=timeoutS" json:"timeout_s,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetTimeoutS() uint32 {
	if x != nil && x.TimeoutS != nil {
		return *x.TimeoutS
	}
	return 0
}

type UpdateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity  *v1.Identity    `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Options   *SessionOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
	SessionId *string         `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *UpdateSessionRequest) Reset() {
	*x = UpdateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionRequest) ProtoMessage() {}

func (x *UpdateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSessionRequest) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *UpdateSessionRequest) GetOptions() *SessionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateSessionRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type DestroySessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity  *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	SessionId *string      `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *DestroySessionRequest) Reset() {
	*x = DestroySessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroySessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroySessionRequest) ProtoMessage() {}

func (x *DestroySessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroySessionRequest.ProtoReflect.Descriptor instead.
func (*DestroySessionRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{3}
}

func (x *DestroySessionRequest) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DestroySessionRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type GetSessionStateByBenefactorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenefactorHandle       *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=benefactor_handle,json=benefactorHandle" json:"benefactor_handle,omitempty"`
	IncludeBillingDisabled *bool                 `protobuf:"varint,2,opt,name=include_billing_disabled,json=includeBillingDisabled,def=0" json:"include_billing_disabled,omitempty"`
	BenefactorUuid         *string               `protobuf:"bytes,3,opt,name=benefactor_uuid,json=benefactorUuid" json:"benefactor_uuid,omitempty"`
}

// Default values for GetSessionStateByBenefactorRequest fields.
const (
	Default_GetSessionStateByBenefactorRequest_IncludeBillingDisabled = bool(false)
)

func (x *GetSessionStateByBenefactorRequest) Reset() {
	*x = GetSessionStateByBenefactorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionStateByBenefactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStateByBenefactorRequest) ProtoMessage() {}

func (x *GetSessionStateByBenefactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStateByBenefactorRequest.ProtoReflect.Descriptor instead.
func (*GetSessionStateByBenefactorRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetSessionStateByBenefactorRequest) GetBenefactorHandle() *v1.GameAccountHandle {
	if x != nil {
		return x.BenefactorHandle
	}
	return nil
}

func (x *GetSessionStateByBenefactorRequest) GetIncludeBillingDisabled() bool {
	if x != nil && x.IncludeBillingDisabled != nil {
		return *x.IncludeBillingDisabled
	}
	return Default_GetSessionStateByBenefactorRequest_IncludeBillingDisabled
}

func (x *GetSessionStateByBenefactorRequest) GetBenefactorUuid() string {
	if x != nil && x.BenefactorUuid != nil {
		return *x.BenefactorUuid
	}
	return ""
}

type GetSessionStateByBenefactorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenefactorHandle *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=benefactor_handle,json=benefactorHandle" json:"benefactor_handle,omitempty"`
	Session          []*SessionState       `protobuf:"bytes,2,rep,name=session" json:"session,omitempty"`
	MinutesRemaining *uint32               `protobuf:"varint,3,opt,name=minutes_remaining,json=minutesRemaining" json:"minutes_remaining,omitempty"`
}

func (x *GetSessionStateByBenefactorResponse) Reset() {
	*x = GetSessionStateByBenefactorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionStateByBenefactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStateByBenefactorResponse) ProtoMessage() {}

func (x *GetSessionStateByBenefactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStateByBenefactorResponse.ProtoReflect.Descriptor instead.
func (*GetSessionStateByBenefactorResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetSessionStateByBenefactorResponse) GetBenefactorHandle() *v1.GameAccountHandle {
	if x != nil {
		return x.BenefactorHandle
	}
	return nil
}

func (x *GetSessionStateByBenefactorResponse) GetSession() []*SessionState {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *GetSessionStateByBenefactorResponse) GetMinutesRemaining() uint32 {
	if x != nil && x.MinutesRemaining != nil {
		return *x.MinutesRemaining
	}
	return 0
}

type MarkSessionsAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session []*SessionIdentifier `protobuf:"bytes,1,rep,name=session" json:"session,omitempty"`
}

func (x *MarkSessionsAliveRequest) Reset() {
	*x = MarkSessionsAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkSessionsAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkSessionsAliveRequest) ProtoMessage() {}

func (x *MarkSessionsAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkSessionsAliveRequest.ProtoReflect.Descriptor instead.
func (*MarkSessionsAliveRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{6}
}

func (x *MarkSessionsAliveRequest) GetSession() []*SessionIdentifier {
	if x != nil {
		return x.Session
	}
	return nil
}

type MarkSessionsAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedSession []*SessionIdentifier `protobuf:"bytes,1,rep,name=failed_session,json=failedSession" json:"failed_session,omitempty"`
}

func (x *MarkSessionsAliveResponse) Reset() {
	*x = MarkSessionsAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkSessionsAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkSessionsAliveResponse) ProtoMessage() {}

func (x *MarkSessionsAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkSessionsAliveResponse.ProtoReflect.Descriptor instead.
func (*MarkSessionsAliveResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{7}
}

func (x *MarkSessionsAliveResponse) GetFailedSession() []*SessionIdentifier {
	if x != nil {
		return x.FailedSession
	}
	return nil
}

type GetSessionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle                 *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	IncludeBillingDisabled *bool                 `protobuf:"varint,2,opt,name=include_billing_disabled,json=includeBillingDisabled,def=0" json:"include_billing_disabled,omitempty"`
}

// Default values for GetSessionStateRequest fields.
const (
	Default_GetSessionStateRequest_IncludeBillingDisabled = bool(false)
)

func (x *GetSessionStateRequest) Reset() {
	*x = GetSessionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStateRequest) ProtoMessage() {}

func (x *GetSessionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStateRequest.ProtoReflect.Descriptor instead.
func (*GetSessionStateRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetSessionStateRequest) GetHandle() *v1.GameAccountHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *GetSessionStateRequest) GetIncludeBillingDisabled() bool {
	if x != nil && x.IncludeBillingDisabled != nil {
		return *x.IncludeBillingDisabled
	}
	return Default_GetSessionStateRequest_IncludeBillingDisabled
}

type GetSessionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle  *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	Session *SessionState         `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
}

func (x *GetSessionStateResponse) Reset() {
	*x = GetSessionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStateResponse) ProtoMessage() {}

func (x *GetSessionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStateResponse.ProtoReflect.Descriptor instead.
func (*GetSessionStateResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetSessionStateResponse) GetHandle() *v1.GameAccountHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *GetSessionStateResponse) GetSession() *SessionState {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetSignedSessionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *GetSignedSessionStateRequest) Reset() {
	*x = GetSignedSessionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedSessionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedSessionStateRequest) ProtoMessage() {}

func (x *GetSignedSessionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedSessionStateRequest.ProtoReflect.Descriptor instead.
func (*GetSignedSessionStateRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetSignedSessionStateRequest) GetAgentId() *v1.GameAccountHandle {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type GetSignedSessionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (x *GetSignedSessionStateResponse) Reset() {
	*x = GetSignedSessionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedSessionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedSessionStateResponse) ProtoMessage() {}

func (x *GetSignedSessionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedSessionStateResponse.ProtoReflect.Descriptor instead.
func (*GetSignedSessionStateResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetSignedSessionStateResponse) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type RefreshSessionKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey []byte  `protobuf:"bytes,1,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	AccountId  *uint64 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *RefreshSessionKeyRequest) Reset() {
	*x = RefreshSessionKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshSessionKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSessionKeyRequest) ProtoMessage() {}

func (x *RefreshSessionKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSessionKeyRequest.ProtoReflect.Descriptor instead.
func (*RefreshSessionKeyRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{12}
}

func (x *RefreshSessionKeyRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *RefreshSessionKeyRequest) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type RefreshSessionKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey []byte `protobuf:"bytes,1,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
}

func (x *RefreshSessionKeyResponse) Reset() {
	*x = RefreshSessionKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshSessionKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSessionKeyResponse) ProtoMessage() {}

func (x *RefreshSessionKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSessionKeyResponse.ProtoReflect.Descriptor instead.
func (*RefreshSessionKeyResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshSessionKeyResponse) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

type GetGameSessionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *v1.GameAccountHandle `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
}

func (x *GetGameSessionInfoRequest) Reset() {
	*x = GetGameSessionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameSessionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameSessionInfoRequest) ProtoMessage() {}

func (x *GetGameSessionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameSessionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGameSessionInfoRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetGameSessionInfoRequest) GetHandle() *v1.GameAccountHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type GetGameSessionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionInfo *GameSessionInfo `protobuf:"bytes,1,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
}

func (x *GetGameSessionInfoResponse) Reset() {
	*x = GetGameSessionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameSessionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameSessionInfoResponse) ProtoMessage() {}

func (x *GetGameSessionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameSessionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetGameSessionInfoResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetGameSessionInfoResponse) GetSessionInfo() *GameSessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

type SessionCreatedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity   *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Reason     *uint32      `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	SessionId  *string      `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionKey []byte       `protobuf:"bytes,4,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	ClientId   *string      `protobuf:"bytes,5,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (x *SessionCreatedNotification) Reset() {
	*x = SessionCreatedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCreatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCreatedNotification) ProtoMessage() {}

func (x *SessionCreatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCreatedNotification.ProtoReflect.Descriptor instead.
func (*SessionCreatedNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{16}
}

func (x *SessionCreatedNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionCreatedNotification) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *SessionCreatedNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *SessionCreatedNotification) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *SessionCreatedNotification) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

type SessionDestroyedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity      *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Reason        *uint32      `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	SessionId     *string      `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ReasonDetails *uint32      `protobuf:"varint,4,opt,name=reason_details,json=reasonDetails" json:"reason_details,omitempty"`
}

func (x *SessionDestroyedNotification) Reset() {
	*x = SessionDestroyedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDestroyedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDestroyedNotification) ProtoMessage() {}

func (x *SessionDestroyedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDestroyedNotification.ProtoReflect.Descriptor instead.
func (*SessionDestroyedNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{17}
}

func (x *SessionDestroyedNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionDestroyedNotification) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *SessionDestroyedNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *SessionDestroyedNotification) GetReasonDetails() uint32 {
	if x != nil && x.ReasonDetails != nil {
		return *x.ReasonDetails
	}
	return 0
}

type SessionUpdatedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity  *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Reason    *uint32      `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	SessionId *string      `protobuf:"bytes,3,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *SessionUpdatedNotification) Reset() {
	*x = SessionUpdatedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdatedNotification) ProtoMessage() {}

func (x *SessionUpdatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdatedNotification.ProtoReflect.Descriptor instead.
func (*SessionUpdatedNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{18}
}

func (x *SessionUpdatedNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionUpdatedNotification) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *SessionUpdatedNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type SessionGameTimeWarningNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity                 *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	SessionId                *string      `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	RemainingTimeDurationMin *uint32      `protobuf:"varint,3,opt,name=remaining_time_duration_min,json=remainingTimeDurationMin" json:"remaining_time_duration_min,omitempty"`
	RestrictionType          *uint32      `protobuf:"varint,4,opt,name=restriction_type,json=restrictionType" json:"restriction_type,omitempty"`
}

func (x *SessionGameTimeWarningNotification) Reset() {
	*x = SessionGameTimeWarningNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGameTimeWarningNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGameTimeWarningNotification) ProtoMessage() {}

func (x *SessionGameTimeWarningNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGameTimeWarningNotification.ProtoReflect.Descriptor instead.
func (*SessionGameTimeWarningNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{19}
}

func (x *SessionGameTimeWarningNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionGameTimeWarningNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *SessionGameTimeWarningNotification) GetRemainingTimeDurationMin() uint32 {
	if x != nil && x.RemainingTimeDurationMin != nil {
		return *x.RemainingTimeDurationMin
	}
	return 0
}

func (x *SessionGameTimeWarningNotification) GetRestrictionType() uint32 {
	if x != nil && x.RestrictionType != nil {
		return *x.RestrictionType
	}
	return 0
}

type SessionQueueUpdatedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity          *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	SessionId         *string      `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Position          *uint32      `protobuf:"varint,3,opt,name=position" json:"position,omitempty"`
	AvgCreationTimeMs *uint64      `protobuf:"varint,4,opt,name=avg_creation_time_ms,json=avgCreationTimeMs" json:"avg_creation_time_ms,omitempty"`
	QueuedTimeMs      *uint64      `protobuf:"varint,5,opt,name=queued_time_ms,json=queuedTimeMs" json:"queued_time_ms,omitempty"`
}

func (x *SessionQueueUpdatedNotification) Reset() {
	*x = SessionQueueUpdatedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueueUpdatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueueUpdatedNotification) ProtoMessage() {}

func (x *SessionQueueUpdatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueueUpdatedNotification.ProtoReflect.Descriptor instead.
func (*SessionQueueUpdatedNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{20}
}

func (x *SessionQueueUpdatedNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionQueueUpdatedNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *SessionQueueUpdatedNotification) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *SessionQueueUpdatedNotification) GetAvgCreationTimeMs() uint64 {
	if x != nil && x.AvgCreationTimeMs != nil {
		return *x.AvgCreationTimeMs
	}
	return 0
}

func (x *SessionQueueUpdatedNotification) GetQueuedTimeMs() uint64 {
	if x != nil && x.QueuedTimeMs != nil {
		return *x.QueuedTimeMs
	}
	return 0
}

type SessionQueueEndNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity  *v1.Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	SessionId *string      `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Reason    *uint32      `protobuf:"varint,3,opt,name=reason" json:"reason,omitempty"`
}

func (x *SessionQueueEndNotification) Reset() {
	*x = SessionQueueEndNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionQueueEndNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionQueueEndNotification) ProtoMessage() {}

func (x *SessionQueueEndNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_session_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionQueueEndNotification.ProtoReflect.Descriptor instead.
func (*SessionQueueEndNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_session_service_proto_rawDescGZIP(), []int{21}
}

func (x *SessionQueueEndNotification) GetIdentity() *v1.Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SessionQueueEndNotification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *SessionQueueEndNotification) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

var File_bgs_low_pb_client_session_service_proto protoreflect.FileDescriptor

var file_bgs_low_pb_client_session_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x1a, 0x25, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c,
	0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x22, 0xb7, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe7, 0x01,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a,
	0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x60, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x35, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd0, 0x01,
	0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x61, 0x76, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0x89, 0x05,
	0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x12, 0x62, 0x0a, 0x10, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x66, 0x0a, 0x12, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x62, 0x0a,
	0x10, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x12, 0x72, 0x0a, 0x18, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x6c, 0x0a, 0x15, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x12, 0x64, 0x0a, 0x11, 0x4f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x34, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x32, 0xbf, 0x08, 0x0a, 0x0e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x31, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6a, 0x62, 0x72, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x78, 0x2f, 0x62, 0x6e, 0x65, 0x74,
	0x2f, 0x62, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
}

var (
	file_bgs_low_pb_client_session_service_proto_rawDescOnce sync.Once
	file_bgs_low_pb_client_session_service_proto_rawDescData = file_bgs_low_pb_client_session_service_proto_rawDesc
)

func file_bgs_low_pb_client_session_service_proto_rawDescGZIP() []byte {
	file_bgs_low_pb_client_session_service_proto_rawDescOnce.Do(func() {
		file_bgs_low_pb_client_session_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgs_low_pb_client_session_service_proto_rawDescData)
	})
	return file_bgs_low_pb_client_session_service_proto_rawDescData
}

var file_bgs_low_pb_client_session_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_bgs_low_pb_client_session_service_proto_goTypes = []interface{}{
	(*CreateSessionRequest)(nil),                // 0: bgs.protocol.session.v1.CreateSessionRequest
	(*CreateSessionResponse)(nil),               // 1: bgs.protocol.session.v1.CreateSessionResponse
	(*UpdateSessionRequest)(nil),                // 2: bgs.protocol.session.v1.UpdateSessionRequest
	(*DestroySessionRequest)(nil),               // 3: bgs.protocol.session.v1.DestroySessionRequest
	(*GetSessionStateByBenefactorRequest)(nil),  // 4: bgs.protocol.session.v1.GetSessionStateByBenefactorRequest
	(*GetSessionStateByBenefactorResponse)(nil), // 5: bgs.protocol.session.v1.GetSessionStateByBenefactorResponse
	(*MarkSessionsAliveRequest)(nil),            // 6: bgs.protocol.session.v1.MarkSessionsAliveRequest
	(*MarkSessionsAliveResponse)(nil),           // 7: bgs.protocol.session.v1.MarkSessionsAliveResponse
	(*GetSessionStateRequest)(nil),              // 8: bgs.protocol.session.v1.GetSessionStateRequest
	(*GetSessionStateResponse)(nil),             // 9: bgs.protocol.session.v1.GetSessionStateResponse
	(*GetSignedSessionStateRequest)(nil),        // 10: bgs.protocol.session.v1.GetSignedSessionStateRequest
	(*GetSignedSessionStateResponse)(nil),       // 11: bgs.protocol.session.v1.GetSignedSessionStateResponse
	(*RefreshSessionKeyRequest)(nil),            // 12: bgs.protocol.session.v1.RefreshSessionKeyRequest
	(*RefreshSessionKeyResponse)(nil),           // 13: bgs.protocol.session.v1.RefreshSessionKeyResponse
	(*GetGameSessionInfoRequest)(nil),           // 14: bgs.protocol.session.v1.GetGameSessionInfoRequest
	(*GetGameSessionInfoResponse)(nil),          // 15: bgs.protocol.session.v1.GetGameSessionInfoResponse
	(*SessionCreatedNotification)(nil),          // 16: bgs.protocol.session.v1.SessionCreatedNotification
	(*SessionDestroyedNotification)(nil),        // 17: bgs.protocol.session.v1.SessionDestroyedNotification
	(*SessionUpdatedNotification)(nil),          // 18: bgs.protocol.session.v1.SessionUpdatedNotification
	(*SessionGameTimeWarningNotification)(nil),  // 19: bgs.protocol.session.v1.SessionGameTimeWarningNotification
	(*SessionQueueUpdatedNotification)(nil),     // 20: bgs.protocol.session.v1.SessionQueueUpdatedNotification
	(*SessionQueueEndNotification)(nil),         // 21: bgs.protocol.session.v1.SessionQueueEndNotification
	(*v1.Identity)(nil),                         // 22: bgs.protocol.account.v1.Identity
	(*SessionOptions)(nil),                      // 23: bgs.protocol.session.v1.SessionOptions
	(*v1.GameAccountHandle)(nil),                // 24: bgs.protocol.account.v1.GameAccountHandle
	(*SessionState)(nil),                        // 25: bgs.protocol.session.v1.SessionState
	(*SessionIdentifier)(nil),                   // 26: bgs.protocol.session.v1.SessionIdentifier
	(*GameSessionInfo)(nil),                     // 27: bgs.protocol.session.v1.GameSessionInfo
	(*protocol.NO_RESPONSE)(nil),                // 28: bgs.protocol.NO_RESPONSE
	(*protocol.NoData)(nil),                     // 29: bgs.protocol.NoData
}
var file_bgs_low_pb_client_session_service_proto_depIdxs = []int32{
	22, // 0: bgs.protocol.session.v1.CreateSessionRequest.identity:type_name -> bgs.protocol.account.v1.Identity
	23, // 1: bgs.protocol.session.v1.CreateSessionRequest.options:type_name -> bgs.protocol.session.v1.SessionOptions
	22, // 2: bgs.protocol.session.v1.UpdateSessionRequest.identity:type_name -> bgs.protocol.account.v1.Identity
	23, // 3: bgs.protocol.session.v1.UpdateSessionRequest.options:type_name -> bgs.protocol.session.v1.SessionOptions
	22, // 4: bgs.protocol.session.v1.DestroySessionRequest.identity:type_name -> bgs.protocol.account.v1.Identity
	24, // 5: bgs.protocol.session.v1.GetSessionStateByBenefactorRequest.benefactor_handle:type_name -> bgs.protocol.account.v1.GameAccountHandle
	24, // 6: bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.benefactor_handle:type_name -> bgs.protocol.account.v1.GameAccountHandle
	25, // 7: bgs.protocol.session.v1.GetSessionStateByBenefactorResponse.session:type_name -> bgs.protocol.session.v1.SessionState
	26, // 8: bgs.protocol.session.v1.MarkSessionsAliveRequest.session:type_name -> bgs.protocol.session.v1.SessionIdentifier
	26, // 9: bgs.protocol.session.v1.MarkSessionsAliveResponse.failed_session:type_name -> bgs.protocol.session.v1.SessionIdentifier
	24, // 10: bgs.protocol.session.v1.GetSessionStateRequest.handle:type_name -> bgs.protocol.account.v1.GameAccountHandle
	24, // 11: bgs.protocol.session.v1.GetSessionStateResponse.handle:type_name -> bgs.protocol.account.v1.GameAccountHandle
	25, // 12: bgs.protocol.session.v1.GetSessionStateResponse.session:type_name -> bgs.protocol.session.v1.SessionState
	24, // 13: bgs.protocol.session.v1.GetSignedSessionStateRequest.agent_id:type_name -> bgs.protocol.account.v1.GameAccountHandle
	24, // 14: bgs.protocol.session.v1.GetGameSessionInfoRequest.handle:type_name -> bgs.protocol.account.v1.GameAccountHandle
	27, // 15: bgs.protocol.session.v1.GetGameSessionInfoResponse.session_info:type_name -> bgs.protocol.session.v1.GameSessionInfo
	22, // 16: bgs.protocol.session.v1.SessionCreatedNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	22, // 17: bgs.protocol.session.v1.SessionDestroyedNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	22, // 18: bgs.protocol.session.v1.SessionUpdatedNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	22, // 19: bgs.protocol.session.v1.SessionGameTimeWarningNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	22, // 20: bgs.protocol.session.v1.SessionQueueUpdatedNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	22, // 21: bgs.protocol.session.v1.SessionQueueEndNotification.identity:type_name -> bgs.protocol.account.v1.Identity
	16, // 22: bgs.protocol.session.v1.SessionListener.OnSessionCreated:input_type -> bgs.protocol.session.v1.SessionCreatedNotification
	17, // 23: bgs.protocol.session.v1.SessionListener.OnSessionDestroyed:input_type -> bgs.protocol.session.v1.SessionDestroyedNotification
	18, // 24: bgs.protocol.session.v1.SessionListener.OnSessionUpdated:input_type -> bgs.protocol.session.v1.SessionUpdatedNotification
	19, // 25: bgs.protocol.session.v1.SessionListener.OnSessionGameTimeWarning:input_type -> bgs.protocol.session.v1.SessionGameTimeWarningNotification
	20, // 26: bgs.protocol.session.v1.SessionListener.OnSessionQueueUpdated:input_type -> bgs.protocol.session.v1.SessionQueueUpdatedNotification
	21, // 27: bgs.protocol.session.v1.SessionListener.OnSessionQueueEnd:input_type -> bgs.protocol.session.v1.SessionQueueEndNotification
	0,  // 28: bgs.protocol.session.v1.SessionService.CreateSession:input_type -> bgs.protocol.session.v1.CreateSessionRequest
	3,  // 29: bgs.protocol.session.v1.SessionService.DestroySession:input_type -> bgs.protocol.session.v1.DestroySessionRequest
	2,  // 30: bgs.protocol.session.v1.SessionService.UpdateSession:input_type -> bgs.protocol.session.v1.UpdateSessionRequest
	4,  // 31: bgs.protocol.session.v1.SessionService.GetSessionStateByBenefactor:input_type -> bgs.protocol.session.v1.GetSessionStateByBenefactorRequest
	6,  // 32: bgs.protocol.session.v1.SessionService.MarkSessionsAlive:input_type -> bgs.protocol.session.v1.MarkSessionsAliveRequest
	8,  // 33: bgs.protocol.session.v1.SessionService.GetSessionState:input_type -> bgs.protocol.session.v1.GetSessionStateRequest
	10, // 34: bgs.protocol.session.v1.SessionService.GetSignedSessionState:input_type -> bgs.protocol.session.v1.GetSignedSessionStateRequest
	12, // 35: bgs.protocol.session.v1.SessionService.RefreshSessionKey:input_type -> bgs.protocol.session.v1.RefreshSessionKeyRequest
	14, // 36: bgs.protocol.session.v1.SessionService.GetGameSessionInfo:input_type -> bgs.protocol.session.v1.GetGameSessionInfoRequest
	28, // 37: bgs.protocol.session.v1.SessionListener.OnSessionCreated:output_type -> bgs.protocol.NO_RESPONSE
	28, // 38: bgs.protocol.session.v1.SessionListener.OnSessionDestroyed:output_type -> bgs.protocol.NO_RESPONSE
	28, // 39: bgs.protocol.session.v1.SessionListener.OnSessionUpdated:output_type -> bgs.protocol.NO_RESPONSE
	28, // 40: bgs.protocol.session.v1.SessionListener.OnSessionGameTimeWarning:output_type -> bgs.protocol.NO_RESPONSE
	28, // 41: bgs.protocol.session.v1.SessionListener.OnSessionQueueUpdated:output_type -> bgs.protocol.NO_RESPONSE
	28, // 42: bgs.protocol.session.v1.SessionListener.OnSessionQueueEnd:output_type -> bgs.protocol.NO_RESPONSE
	1,  // 43: bgs.protocol.session.v1.SessionService.CreateSession:output_type -> bgs.protocol.session.v1.CreateSessionResponse
	29, // 44: bgs.protocol.session.v1.SessionService.DestroySession:output_type -> bgs.protocol.NoData
	29, // 45: bgs.protocol.session.v1.SessionService.UpdateSession:output_type -> bgs.protocol.NoData
	5,  // 46: bgs.protocol.session.v1.SessionService.GetSessionStateByBenefactor:output_type -> bgs.protocol.session.v1.GetSessionStateByBenefactorResponse
	7,  // 47: bgs.protocol.session.v1.SessionService.MarkSessionsAlive:output_type -> bgs.protocol.session.v1.MarkSessionsAliveResponse
	9,  // 48: bgs.protocol.session.v1.SessionService.GetSessionState:output_type -> bgs.protocol.session.v1.GetSessionStateResponse
	11, // 49: bgs.protocol.session.v1.SessionService.GetSignedSessionState:output_type -> bgs.protocol.session.v1.GetSignedSessionStateResponse
	13, // 50: bgs.protocol.session.v1.SessionService.RefreshSessionKey:output_type -> bgs.protocol.session.v1.RefreshSessionKeyResponse
	15, // 51: bgs.protocol.session.v1.SessionService.GetGameSessionInfo:output_type -> bgs.protocol.session.v1.GetGameSessionInfoResponse
	37, // [37:52] is the sub-list for method output_type
	22, // [22:37] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_bgs_low_pb_client_session_service_proto_init() }
func file_bgs_low_pb_client_session_service_proto_init() {
	if File_bgs_low_pb_client_session_service_proto != nil {
		return
	}
	file_bgs_low_pb_client_session_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgs_low_pb_client_session_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroySessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionStateByBenefactorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionStateByBenefactorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkSessionsAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkSessionsAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedSessionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedSessionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshSessionKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshSessionKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameSessionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameSessionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCreatedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDestroyedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdatedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGameTimeWarningNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueueUpdatedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_session_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionQueueEndNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgs_low_pb_client_session_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_bgs_low_pb_client_session_service_proto_goTypes,
		DependencyIndexes: file_bgs_low_pb_client_session_service_proto_depIdxs,
		MessageInfos:      file_bgs_low_pb_client_session_service_proto_msgTypes,
	}.Build()
	File_bgs_low_pb_client_session_service_proto = out.File
	file_bgs_low_pb_client_session_service_proto_rawDesc = nil
	file_bgs_low_pb_client_session_service_proto_goTypes = nil
	file_bgs_low_pb_client_session_service_proto_depIdxs = nil
}
