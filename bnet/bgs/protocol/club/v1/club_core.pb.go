// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: bgs/low/pb/client/club_core.proto

package v1

import (
	protocol "github.com/cjbrigato/logprox/bnet/bgs/protocol"
	v2 "github.com/cjbrigato/logprox/bnet/bgs/protocol/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvatarId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *AvatarId) Reset() {
	*x = AvatarId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarId) ProtoMessage() {}

func (x *AvatarId) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarId.ProtoReflect.Descriptor instead.
func (*AvatarId) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{0}
}

func (x *AvatarId) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SetBroadcastOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (x *SetBroadcastOptions) Reset() {
	*x = SetBroadcastOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBroadcastOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBroadcastOptions) ProtoMessage() {}

func (x *SetBroadcastOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBroadcastOptions.ProtoReflect.Descriptor instead.
func (*SetBroadcastOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{1}
}

func (x *SetBroadcastOptions) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type Broadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      *string            `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Creator      *MemberDescription `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	CreationTime *uint64            `protobuf:"varint,3,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
}

func (x *Broadcast) Reset() {
	*x = Broadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broadcast) ProtoMessage() {}

func (x *Broadcast) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broadcast.ProtoReflect.Descriptor instead.
func (*Broadcast) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{2}
}

func (x *Broadcast) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *Broadcast) GetCreator() *MemberDescription {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Broadcast) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

type ClubCreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *UniqueClubType      `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Attribute       []*v2.Attribute      `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
	Name            *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description     *string              `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Avatar          *AvatarId            `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	PrivacyLevel    *PrivacyLevel        `protobuf:"varint,6,opt,name=privacy_level,json=privacyLevel,enum=bgs.protocol.club.v1.PrivacyLevel" json:"privacy_level,omitempty"`
	ShortName       *string              `protobuf:"bytes,7,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	VisibilityLevel *VisibilityLevel     `protobuf:"varint,8,opt,name=visibility_level,json=visibilityLevel,enum=bgs.protocol.club.v1.VisibilityLevel" json:"visibility_level,omitempty"`
	Member          *CreateMemberOptions `protobuf:"bytes,10,opt,name=member" json:"member,omitempty"`
	Stream          *CreateStreamOptions `protobuf:"bytes,11,opt,name=stream" json:"stream,omitempty"`
	Tag             *TagOptions          `protobuf:"bytes,12,opt,name=tag" json:"tag,omitempty"`
	SearchAttribute []*v2.Attribute      `protobuf:"bytes,13,rep,name=search_attribute,json=searchAttribute" json:"search_attribute,omitempty"`
	Locale          *string              `protobuf:"bytes,14,opt,name=locale" json:"locale,omitempty"`
	Timezone        *string              `protobuf:"bytes,15,opt,name=timezone" json:"timezone,omitempty"`
}

func (x *ClubCreateOptions) Reset() {
	*x = ClubCreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubCreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubCreateOptions) ProtoMessage() {}

func (x *ClubCreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubCreateOptions.ProtoReflect.Descriptor instead.
func (*ClubCreateOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{3}
}

func (x *ClubCreateOptions) GetType() *UniqueClubType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClubCreateOptions) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *ClubCreateOptions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClubCreateOptions) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClubCreateOptions) GetAvatar() *AvatarId {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ClubCreateOptions) GetPrivacyLevel() PrivacyLevel {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return PrivacyLevel_PRIVACY_LEVEL_CLOSED
}

func (x *ClubCreateOptions) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *ClubCreateOptions) GetVisibilityLevel() VisibilityLevel {
	if x != nil && x.VisibilityLevel != nil {
		return *x.VisibilityLevel
	}
	return VisibilityLevel_VISIBILITY_LEVEL_PRIVATE
}

func (x *ClubCreateOptions) GetMember() *CreateMemberOptions {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ClubCreateOptions) GetStream() *CreateStreamOptions {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *ClubCreateOptions) GetTag() *TagOptions {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ClubCreateOptions) GetSearchAttribute() []*v2.Attribute {
	if x != nil {
		return x.SearchAttribute
	}
	return nil
}

func (x *ClubCreateOptions) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ClubCreateOptions) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

type Club struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type            *UniqueClubType      `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Attribute       []*v2.Attribute      `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	Name            *string              `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description     *string              `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Broadcast       *Broadcast           `protobuf:"bytes,6,opt,name=broadcast" json:"broadcast,omitempty"`
	Avatar          *AvatarId            `protobuf:"bytes,7,opt,name=avatar" json:"avatar,omitempty"`
	PrivacyLevel    *PrivacyLevel        `protobuf:"varint,8,opt,name=privacy_level,json=privacyLevel,enum=bgs.protocol.club.v1.PrivacyLevel" json:"privacy_level,omitempty"`
	VisibilityLevel *VisibilityLevel     `protobuf:"varint,9,opt,name=visibility_level,json=visibilityLevel,enum=bgs.protocol.club.v1.VisibilityLevel" json:"visibility_level,omitempty"`
	MemberCount     *uint32              `protobuf:"varint,10,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	CreationTime    *uint64              `protobuf:"varint,11,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	StreamPosition  *StreamPosition      `protobuf:"bytes,12,opt,name=stream_position,json=streamPosition" json:"stream_position,omitempty"`
	RoleSet         *ClubRoleSet         `protobuf:"bytes,13,opt,name=role_set,json=roleSet" json:"role_set,omitempty"`
	Leader          []*MemberDescription `protobuf:"bytes,14,rep,name=leader" json:"leader,omitempty"`
	ShortName       *string              `protobuf:"bytes,15,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	SearchAttribute []*v2.Attribute      `protobuf:"bytes,16,rep,name=search_attribute,json=searchAttribute" json:"search_attribute,omitempty"`
	Tag             []*TagIdentifier     `protobuf:"bytes,17,rep,name=tag" json:"tag,omitempty"`
	Locale          *string              `protobuf:"bytes,18,opt,name=locale" json:"locale,omitempty"`
	Timezone        *string              `protobuf:"bytes,19,opt,name=timezone" json:"timezone,omitempty"`
}

func (x *Club) Reset() {
	*x = Club{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Club) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Club) ProtoMessage() {}

func (x *Club) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Club.ProtoReflect.Descriptor instead.
func (*Club) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{4}
}

func (x *Club) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Club) GetType() *UniqueClubType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Club) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Club) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Club) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Club) GetBroadcast() *Broadcast {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *Club) GetAvatar() *AvatarId {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *Club) GetPrivacyLevel() PrivacyLevel {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return PrivacyLevel_PRIVACY_LEVEL_CLOSED
}

func (x *Club) GetVisibilityLevel() VisibilityLevel {
	if x != nil && x.VisibilityLevel != nil {
		return *x.VisibilityLevel
	}
	return VisibilityLevel_VISIBILITY_LEVEL_PRIVATE
}

func (x *Club) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *Club) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Club) GetStreamPosition() *StreamPosition {
	if x != nil {
		return x.StreamPosition
	}
	return nil
}

func (x *Club) GetRoleSet() *ClubRoleSet {
	if x != nil {
		return x.RoleSet
	}
	return nil
}

func (x *Club) GetLeader() []*MemberDescription {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *Club) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *Club) GetSearchAttribute() []*v2.Attribute {
	if x != nil {
		return x.SearchAttribute
	}
	return nil
}

func (x *Club) GetTag() []*TagIdentifier {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Club) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *Club) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

type ClubDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint64              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type            *UniqueClubType      `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name            *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description     *string              `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Avatar          *AvatarId            `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	PrivacyLevel    *PrivacyLevel        `protobuf:"varint,6,opt,name=privacy_level,json=privacyLevel,enum=bgs.protocol.club.v1.PrivacyLevel" json:"privacy_level,omitempty"`
	VisibilityLevel *VisibilityLevel     `protobuf:"varint,7,opt,name=visibility_level,json=visibilityLevel,enum=bgs.protocol.club.v1.VisibilityLevel" json:"visibility_level,omitempty"`
	MemberCount     *uint32              `protobuf:"varint,8,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	Leader          []*MemberDescription `protobuf:"bytes,9,rep,name=leader" json:"leader,omitempty"`
	CreationTime    *uint64              `protobuf:"varint,10,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Timezone        *string              `protobuf:"bytes,11,opt,name=timezone" json:"timezone,omitempty"`
	Locale          *string              `protobuf:"bytes,12,opt,name=locale" json:"locale,omitempty"`
	Tag             []*TagIdentifier     `protobuf:"bytes,13,rep,name=tag" json:"tag,omitempty"`
}

func (x *ClubDescription) Reset() {
	*x = ClubDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubDescription) ProtoMessage() {}

func (x *ClubDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubDescription.ProtoReflect.Descriptor instead.
func (*ClubDescription) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{5}
}

func (x *ClubDescription) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ClubDescription) GetType() *UniqueClubType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClubDescription) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClubDescription) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClubDescription) GetAvatar() *AvatarId {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ClubDescription) GetPrivacyLevel() PrivacyLevel {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return PrivacyLevel_PRIVACY_LEVEL_CLOSED
}

func (x *ClubDescription) GetVisibilityLevel() VisibilityLevel {
	if x != nil && x.VisibilityLevel != nil {
		return *x.VisibilityLevel
	}
	return VisibilityLevel_VISIBILITY_LEVEL_PRIVATE
}

func (x *ClubDescription) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *ClubDescription) GetLeader() []*MemberDescription {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *ClubDescription) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *ClubDescription) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *ClubDescription) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ClubDescription) GetTag() []*TagIdentifier {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ClubView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId *uint64              `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	Marker *protocol.ViewMarker `protobuf:"bytes,2,opt,name=marker" json:"marker,omitempty"`
}

func (x *ClubView) Reset() {
	*x = ClubView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubView) ProtoMessage() {}

func (x *ClubView) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubView.ProtoReflect.Descriptor instead.
func (*ClubView) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{6}
}

func (x *ClubView) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *ClubView) GetMarker() *protocol.ViewMarker {
	if x != nil {
		return x.Marker
	}
	return nil
}

type ClubStateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute       []*v2.Attribute      `protobuf:"bytes,1,rep,name=attribute" json:"attribute,omitempty"`
	Name            *string              `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description     *string              `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Broadcast       *SetBroadcastOptions `protobuf:"bytes,4,opt,name=broadcast" json:"broadcast,omitempty"`
	Avatar          *AvatarId            `protobuf:"bytes,5,opt,name=avatar" json:"avatar,omitempty"`
	PrivacyLevel    *PrivacyLevel        `protobuf:"varint,6,opt,name=privacy_level,json=privacyLevel,enum=bgs.protocol.club.v1.PrivacyLevel" json:"privacy_level,omitempty"`
	StreamPosition  *StreamPosition      `protobuf:"bytes,7,opt,name=stream_position,json=streamPosition" json:"stream_position,omitempty"`
	ShortName       *string              `protobuf:"bytes,8,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	VisibilityLevel *VisibilityLevel     `protobuf:"varint,9,opt,name=visibility_level,json=visibilityLevel,enum=bgs.protocol.club.v1.VisibilityLevel" json:"visibility_level,omitempty"`
	Locale          *string              `protobuf:"bytes,10,opt,name=locale" json:"locale,omitempty"`
	Timezone        *string              `protobuf:"bytes,11,opt,name=timezone" json:"timezone,omitempty"`
	TagOptions      *TagOptions          `protobuf:"bytes,12,opt,name=tag_options,json=tagOptions" json:"tag_options,omitempty"`
	SearchAttribute []*v2.Attribute      `protobuf:"bytes,13,rep,name=search_attribute,json=searchAttribute" json:"search_attribute,omitempty"`
}

func (x *ClubStateOptions) Reset() {
	*x = ClubStateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubStateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubStateOptions) ProtoMessage() {}

func (x *ClubStateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubStateOptions.ProtoReflect.Descriptor instead.
func (*ClubStateOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{7}
}

func (x *ClubStateOptions) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *ClubStateOptions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClubStateOptions) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClubStateOptions) GetBroadcast() *SetBroadcastOptions {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *ClubStateOptions) GetAvatar() *AvatarId {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ClubStateOptions) GetPrivacyLevel() PrivacyLevel {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return PrivacyLevel_PRIVACY_LEVEL_CLOSED
}

func (x *ClubStateOptions) GetStreamPosition() *StreamPosition {
	if x != nil {
		return x.StreamPosition
	}
	return nil
}

func (x *ClubStateOptions) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *ClubStateOptions) GetVisibilityLevel() VisibilityLevel {
	if x != nil && x.VisibilityLevel != nil {
		return *x.VisibilityLevel
	}
	return VisibilityLevel_VISIBILITY_LEVEL_PRIVATE
}

func (x *ClubStateOptions) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ClubStateOptions) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *ClubStateOptions) GetTagOptions() *TagOptions {
	if x != nil {
		return x.TagOptions
	}
	return nil
}

func (x *ClubStateOptions) GetSearchAttribute() []*v2.Attribute {
	if x != nil {
		return x.SearchAttribute
	}
	return nil
}

type ClubStateAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubId          *uint64          `protobuf:"varint,1,opt,name=club_id,json=clubId" json:"club_id,omitempty"`
	Attribute       []*v2.Attribute  `protobuf:"bytes,2,rep,name=attribute" json:"attribute,omitempty"`
	Name            *string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description     *string          `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Broadcast       *Broadcast       `protobuf:"bytes,5,opt,name=broadcast" json:"broadcast,omitempty"`
	Avatar          *AvatarId        `protobuf:"bytes,6,opt,name=avatar" json:"avatar,omitempty"`
	PrivacyLevel    *PrivacyLevel    `protobuf:"varint,7,opt,name=privacy_level,json=privacyLevel,enum=bgs.protocol.club.v1.PrivacyLevel" json:"privacy_level,omitempty"`
	StreamPosition  *StreamPosition  `protobuf:"bytes,8,opt,name=stream_position,json=streamPosition" json:"stream_position,omitempty"`
	ShortName       *string          `protobuf:"bytes,9,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	VisibilityLevel *VisibilityLevel `protobuf:"varint,10,opt,name=visibility_level,json=visibilityLevel,enum=bgs.protocol.club.v1.VisibilityLevel" json:"visibility_level,omitempty"`
	Locale          *string          `protobuf:"bytes,11,opt,name=locale" json:"locale,omitempty"`
	Timezone        *string          `protobuf:"bytes,12,opt,name=timezone" json:"timezone,omitempty"`
	Tag             []*TagIdentifier `protobuf:"bytes,13,rep,name=tag" json:"tag,omitempty"`
	SearchAttribute []*v2.Attribute  `protobuf:"bytes,14,rep,name=search_attribute,json=searchAttribute" json:"search_attribute,omitempty"`
	TagCleared      *bool            `protobuf:"varint,15,opt,name=tag_cleared,json=tagCleared" json:"tag_cleared,omitempty"`
}

func (x *ClubStateAssignment) Reset() {
	*x = ClubStateAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubStateAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubStateAssignment) ProtoMessage() {}

func (x *ClubStateAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubStateAssignment.ProtoReflect.Descriptor instead.
func (*ClubStateAssignment) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{8}
}

func (x *ClubStateAssignment) GetClubId() uint64 {
	if x != nil && x.ClubId != nil {
		return *x.ClubId
	}
	return 0
}

func (x *ClubStateAssignment) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *ClubStateAssignment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClubStateAssignment) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClubStateAssignment) GetBroadcast() *Broadcast {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *ClubStateAssignment) GetAvatar() *AvatarId {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ClubStateAssignment) GetPrivacyLevel() PrivacyLevel {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return PrivacyLevel_PRIVACY_LEVEL_CLOSED
}

func (x *ClubStateAssignment) GetStreamPosition() *StreamPosition {
	if x != nil {
		return x.StreamPosition
	}
	return nil
}

func (x *ClubStateAssignment) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *ClubStateAssignment) GetVisibilityLevel() VisibilityLevel {
	if x != nil && x.VisibilityLevel != nil {
		return *x.VisibilityLevel
	}
	return VisibilityLevel_VISIBILITY_LEVEL_PRIVATE
}

func (x *ClubStateAssignment) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ClubStateAssignment) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *ClubStateAssignment) GetTag() []*TagIdentifier {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ClubStateAssignment) GetSearchAttribute() []*v2.Attribute {
	if x != nil {
		return x.SearchAttribute
	}
	return nil
}

func (x *ClubStateAssignment) GetTagCleared() bool {
	if x != nil && x.TagCleared != nil {
		return *x.TagCleared
	}
	return false
}

type StreamSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *uint64                   `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Filter   *StreamNotificationFilter `protobuf:"varint,2,opt,name=filter,enum=bgs.protocol.club.v1.StreamNotificationFilter" json:"filter,omitempty"`
}

func (x *StreamSettings) Reset() {
	*x = StreamSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSettings) ProtoMessage() {}

func (x *StreamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSettings.ProtoReflect.Descriptor instead.
func (*StreamSettings) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{9}
}

func (x *StreamSettings) GetStreamId() uint64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *StreamSettings) GetFilter() StreamNotificationFilter {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return StreamNotificationFilter_STREAM_NOTIFICATION_FILTER_NONE
}

type ClubSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream                      []*StreamSettings `protobuf:"bytes,1,rep,name=stream" json:"stream,omitempty"`
	StreamNotificationFilterAll *bool             `protobuf:"varint,2,opt,name=stream_notification_filter_all,json=streamNotificationFilterAll" json:"stream_notification_filter_all,omitempty"`
	Attribute                   []*v2.Attribute   `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	PushNotificationFilterAll   *bool             `protobuf:"varint,4,opt,name=push_notification_filter_all,json=pushNotificationFilterAll" json:"push_notification_filter_all,omitempty"`
}

func (x *ClubSettings) Reset() {
	*x = ClubSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSettings) ProtoMessage() {}

func (x *ClubSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSettings.ProtoReflect.Descriptor instead.
func (*ClubSettings) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{10}
}

func (x *ClubSettings) GetStream() []*StreamSettings {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *ClubSettings) GetStreamNotificationFilterAll() bool {
	if x != nil && x.StreamNotificationFilterAll != nil {
		return *x.StreamNotificationFilterAll
	}
	return false
}

func (x *ClubSettings) GetAttribute() []*v2.Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *ClubSettings) GetPushNotificationFilterAll() bool {
	if x != nil && x.PushNotificationFilterAll != nil {
		return *x.PushNotificationFilterAll
	}
	return false
}

type ClubSettingsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream   []*StreamSettings `protobuf:"bytes,1,rep,name=stream" json:"stream,omitempty"`
	Settings *ClubSettings     `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	Version  *uint32           `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (x *ClubSettingsOptions) Reset() {
	*x = ClubSettingsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSettingsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSettingsOptions) ProtoMessage() {}

func (x *ClubSettingsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSettingsOptions.ProtoReflect.Descriptor instead.
func (*ClubSettingsOptions) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{11}
}

func (x *ClubSettingsOptions) GetStream() []*StreamSettings {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *ClubSettingsOptions) GetSettings() *ClubSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ClubSettingsOptions) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type ClubSettingsAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream   []*StreamSettings `protobuf:"bytes,1,rep,name=stream" json:"stream,omitempty"`
	Settings *ClubSettings     `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (x *ClubSettingsAssignment) Reset() {
	*x = ClubSettingsAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSettingsAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSettingsAssignment) ProtoMessage() {}

func (x *ClubSettingsAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_club_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSettingsAssignment.ProtoReflect.Descriptor instead.
func (*ClubSettingsAssignment) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_club_core_proto_rawDescGZIP(), []int{12}
}

func (x *ClubSettingsAssignment) GetStream() []*StreamSettings {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *ClubSettingsAssignment) GetSettings() *ClubSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

var File_bgs_low_pb_client_club_core_proto protoreflect.FileDescriptor

var file_bgs_low_pb_client_club_core_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c,
	0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77,
	0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x75, 0x62, 0x5f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70,
	0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1a, 0x0a, 0x08, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a,
	0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe4, 0x05, 0x0a,
	0x11, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x10,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x41,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0xb9, 0x07, 0x0a, 0x04, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x6f, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3f, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0xd8, 0x04, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6c, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x49, 0x64, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x55, 0x0a, 0x08, 0x43, 0x6c,
	0x75, 0x62, 0x56, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x22, 0xca, 0x05, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xf1,
	0x05, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x10, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x43, 0x6c,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70,
	0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3e,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x75,
	0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6a, 0x62, 0x72, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x78, 0x2f, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x62, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x62, 0x2f, 0x76, 0x31,
}

var (
	file_bgs_low_pb_client_club_core_proto_rawDescOnce sync.Once
	file_bgs_low_pb_client_club_core_proto_rawDescData = file_bgs_low_pb_client_club_core_proto_rawDesc
)

func file_bgs_low_pb_client_club_core_proto_rawDescGZIP() []byte {
	file_bgs_low_pb_client_club_core_proto_rawDescOnce.Do(func() {
		file_bgs_low_pb_client_club_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgs_low_pb_client_club_core_proto_rawDescData)
	})
	return file_bgs_low_pb_client_club_core_proto_rawDescData
}

var file_bgs_low_pb_client_club_core_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_bgs_low_pb_client_club_core_proto_goTypes = []interface{}{
	(*AvatarId)(nil),               // 0: bgs.protocol.club.v1.AvatarId
	(*SetBroadcastOptions)(nil),    // 1: bgs.protocol.club.v1.SetBroadcastOptions
	(*Broadcast)(nil),              // 2: bgs.protocol.club.v1.Broadcast
	(*ClubCreateOptions)(nil),      // 3: bgs.protocol.club.v1.ClubCreateOptions
	(*Club)(nil),                   // 4: bgs.protocol.club.v1.Club
	(*ClubDescription)(nil),        // 5: bgs.protocol.club.v1.ClubDescription
	(*ClubView)(nil),               // 6: bgs.protocol.club.v1.ClubView
	(*ClubStateOptions)(nil),       // 7: bgs.protocol.club.v1.ClubStateOptions
	(*ClubStateAssignment)(nil),    // 8: bgs.protocol.club.v1.ClubStateAssignment
	(*StreamSettings)(nil),         // 9: bgs.protocol.club.v1.StreamSettings
	(*ClubSettings)(nil),           // 10: bgs.protocol.club.v1.ClubSettings
	(*ClubSettingsOptions)(nil),    // 11: bgs.protocol.club.v1.ClubSettingsOptions
	(*ClubSettingsAssignment)(nil), // 12: bgs.protocol.club.v1.ClubSettingsAssignment
	(*MemberDescription)(nil),      // 13: bgs.protocol.club.v1.MemberDescription
	(*UniqueClubType)(nil),         // 14: bgs.protocol.club.v1.UniqueClubType
	(*v2.Attribute)(nil),           // 15: bgs.protocol.v2.Attribute
	(PrivacyLevel)(0),              // 16: bgs.protocol.club.v1.PrivacyLevel
	(VisibilityLevel)(0),           // 17: bgs.protocol.club.v1.VisibilityLevel
	(*CreateMemberOptions)(nil),    // 18: bgs.protocol.club.v1.CreateMemberOptions
	(*CreateStreamOptions)(nil),    // 19: bgs.protocol.club.v1.CreateStreamOptions
	(*TagOptions)(nil),             // 20: bgs.protocol.club.v1.TagOptions
	(*StreamPosition)(nil),         // 21: bgs.protocol.club.v1.StreamPosition
	(*ClubRoleSet)(nil),            // 22: bgs.protocol.club.v1.ClubRoleSet
	(*TagIdentifier)(nil),          // 23: bgs.protocol.club.v1.TagIdentifier
	(*protocol.ViewMarker)(nil),    // 24: bgs.protocol.ViewMarker
	(StreamNotificationFilter)(0),  // 25: bgs.protocol.club.v1.StreamNotificationFilter
}
var file_bgs_low_pb_client_club_core_proto_depIdxs = []int32{
	13, // 0: bgs.protocol.club.v1.Broadcast.creator:type_name -> bgs.protocol.club.v1.MemberDescription
	14, // 1: bgs.protocol.club.v1.ClubCreateOptions.type:type_name -> bgs.protocol.club.v1.UniqueClubType
	15, // 2: bgs.protocol.club.v1.ClubCreateOptions.attribute:type_name -> bgs.protocol.v2.Attribute
	0,  // 3: bgs.protocol.club.v1.ClubCreateOptions.avatar:type_name -> bgs.protocol.club.v1.AvatarId
	16, // 4: bgs.protocol.club.v1.ClubCreateOptions.privacy_level:type_name -> bgs.protocol.club.v1.PrivacyLevel
	17, // 5: bgs.protocol.club.v1.ClubCreateOptions.visibility_level:type_name -> bgs.protocol.club.v1.VisibilityLevel
	18, // 6: bgs.protocol.club.v1.ClubCreateOptions.member:type_name -> bgs.protocol.club.v1.CreateMemberOptions
	19, // 7: bgs.protocol.club.v1.ClubCreateOptions.stream:type_name -> bgs.protocol.club.v1.CreateStreamOptions
	20, // 8: bgs.protocol.club.v1.ClubCreateOptions.tag:type_name -> bgs.protocol.club.v1.TagOptions
	15, // 9: bgs.protocol.club.v1.ClubCreateOptions.search_attribute:type_name -> bgs.protocol.v2.Attribute
	14, // 10: bgs.protocol.club.v1.Club.type:type_name -> bgs.protocol.club.v1.UniqueClubType
	15, // 11: bgs.protocol.club.v1.Club.attribute:type_name -> bgs.protocol.v2.Attribute
	2,  // 12: bgs.protocol.club.v1.Club.broadcast:type_name -> bgs.protocol.club.v1.Broadcast
	0,  // 13: bgs.protocol.club.v1.Club.avatar:type_name -> bgs.protocol.club.v1.AvatarId
	16, // 14: bgs.protocol.club.v1.Club.privacy_level:type_name -> bgs.protocol.club.v1.PrivacyLevel
	17, // 15: bgs.protocol.club.v1.Club.visibility_level:type_name -> bgs.protocol.club.v1.VisibilityLevel
	21, // 16: bgs.protocol.club.v1.Club.stream_position:type_name -> bgs.protocol.club.v1.StreamPosition
	22, // 17: bgs.protocol.club.v1.Club.role_set:type_name -> bgs.protocol.club.v1.ClubRoleSet
	13, // 18: bgs.protocol.club.v1.Club.leader:type_name -> bgs.protocol.club.v1.MemberDescription
	15, // 19: bgs.protocol.club.v1.Club.search_attribute:type_name -> bgs.protocol.v2.Attribute
	23, // 20: bgs.protocol.club.v1.Club.tag:type_name -> bgs.protocol.club.v1.TagIdentifier
	14, // 21: bgs.protocol.club.v1.ClubDescription.type:type_name -> bgs.protocol.club.v1.UniqueClubType
	0,  // 22: bgs.protocol.club.v1.ClubDescription.avatar:type_name -> bgs.protocol.club.v1.AvatarId
	16, // 23: bgs.protocol.club.v1.ClubDescription.privacy_level:type_name -> bgs.protocol.club.v1.PrivacyLevel
	17, // 24: bgs.protocol.club.v1.ClubDescription.visibility_level:type_name -> bgs.protocol.club.v1.VisibilityLevel
	13, // 25: bgs.protocol.club.v1.ClubDescription.leader:type_name -> bgs.protocol.club.v1.MemberDescription
	23, // 26: bgs.protocol.club.v1.ClubDescription.tag:type_name -> bgs.protocol.club.v1.TagIdentifier
	24, // 27: bgs.protocol.club.v1.ClubView.marker:type_name -> bgs.protocol.ViewMarker
	15, // 28: bgs.protocol.club.v1.ClubStateOptions.attribute:type_name -> bgs.protocol.v2.Attribute
	1,  // 29: bgs.protocol.club.v1.ClubStateOptions.broadcast:type_name -> bgs.protocol.club.v1.SetBroadcastOptions
	0,  // 30: bgs.protocol.club.v1.ClubStateOptions.avatar:type_name -> bgs.protocol.club.v1.AvatarId
	16, // 31: bgs.protocol.club.v1.ClubStateOptions.privacy_level:type_name -> bgs.protocol.club.v1.PrivacyLevel
	21, // 32: bgs.protocol.club.v1.ClubStateOptions.stream_position:type_name -> bgs.protocol.club.v1.StreamPosition
	17, // 33: bgs.protocol.club.v1.ClubStateOptions.visibility_level:type_name -> bgs.protocol.club.v1.VisibilityLevel
	20, // 34: bgs.protocol.club.v1.ClubStateOptions.tag_options:type_name -> bgs.protocol.club.v1.TagOptions
	15, // 35: bgs.protocol.club.v1.ClubStateOptions.search_attribute:type_name -> bgs.protocol.v2.Attribute
	15, // 36: bgs.protocol.club.v1.ClubStateAssignment.attribute:type_name -> bgs.protocol.v2.Attribute
	2,  // 37: bgs.protocol.club.v1.ClubStateAssignment.broadcast:type_name -> bgs.protocol.club.v1.Broadcast
	0,  // 38: bgs.protocol.club.v1.ClubStateAssignment.avatar:type_name -> bgs.protocol.club.v1.AvatarId
	16, // 39: bgs.protocol.club.v1.ClubStateAssignment.privacy_level:type_name -> bgs.protocol.club.v1.PrivacyLevel
	21, // 40: bgs.protocol.club.v1.ClubStateAssignment.stream_position:type_name -> bgs.protocol.club.v1.StreamPosition
	17, // 41: bgs.protocol.club.v1.ClubStateAssignment.visibility_level:type_name -> bgs.protocol.club.v1.VisibilityLevel
	23, // 42: bgs.protocol.club.v1.ClubStateAssignment.tag:type_name -> bgs.protocol.club.v1.TagIdentifier
	15, // 43: bgs.protocol.club.v1.ClubStateAssignment.search_attribute:type_name -> bgs.protocol.v2.Attribute
	25, // 44: bgs.protocol.club.v1.StreamSettings.filter:type_name -> bgs.protocol.club.v1.StreamNotificationFilter
	9,  // 45: bgs.protocol.club.v1.ClubSettings.stream:type_name -> bgs.protocol.club.v1.StreamSettings
	15, // 46: bgs.protocol.club.v1.ClubSettings.attribute:type_name -> bgs.protocol.v2.Attribute
	9,  // 47: bgs.protocol.club.v1.ClubSettingsOptions.stream:type_name -> bgs.protocol.club.v1.StreamSettings
	10, // 48: bgs.protocol.club.v1.ClubSettingsOptions.settings:type_name -> bgs.protocol.club.v1.ClubSettings
	9,  // 49: bgs.protocol.club.v1.ClubSettingsAssignment.stream:type_name -> bgs.protocol.club.v1.StreamSettings
	10, // 50: bgs.protocol.club.v1.ClubSettingsAssignment.settings:type_name -> bgs.protocol.club.v1.ClubSettings
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_bgs_low_pb_client_club_core_proto_init() }
func file_bgs_low_pb_client_club_core_proto_init() {
	if File_bgs_low_pb_client_club_core_proto != nil {
		return
	}
	file_bgs_low_pb_client_club_type_proto_init()
	file_bgs_low_pb_client_club_enum_proto_init()
	file_bgs_low_pb_client_club_role_proto_init()
	file_bgs_low_pb_client_club_member_proto_init()
	file_bgs_low_pb_client_club_stream_proto_init()
	file_bgs_low_pb_client_club_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgs_low_pb_client_club_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBroadcastOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubCreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Club); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubStateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubStateAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSettingsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_club_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSettingsAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgs_low_pb_client_club_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bgs_low_pb_client_club_core_proto_goTypes,
		DependencyIndexes: file_bgs_low_pb_client_club_core_proto_depIdxs,
		MessageInfos:      file_bgs_low_pb_client_club_core_proto_msgTypes,
	}.Build()
	File_bgs_low_pb_client_club_core_proto = out.File
	file_bgs_low_pb_client_club_core_proto_rawDesc = nil
	file_bgs_low_pb_client_club_core_proto_goTypes = nil
	file_bgs_low_pb_client_club_core_proto_depIdxs = nil
}
