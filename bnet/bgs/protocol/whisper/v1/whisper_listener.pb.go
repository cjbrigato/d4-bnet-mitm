// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: bgs/low/pb/client/whisper_listener.proto

package v1

import (
	protocol "github.com/cjbrigato/logprox/bnet/bgs/protocol"
	v1 "github.com/cjbrigato/logprox/bnet/bgs/protocol/account/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WhisperNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId    *v1.AccountId `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	Whisper         *Whisper      `protobuf:"bytes,2,opt,name=whisper" json:"whisper,omitempty"`
	SenderBattleTag *string       `protobuf:"bytes,3,opt,name=sender_battle_tag,json=senderBattleTag" json:"sender_battle_tag,omitempty"`
}

func (x *WhisperNotification) Reset() {
	*x = WhisperNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhisperNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperNotification) ProtoMessage() {}

func (x *WhisperNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperNotification.ProtoReflect.Descriptor instead.
func (*WhisperNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{0}
}

func (x *WhisperNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *WhisperNotification) GetWhisper() *Whisper {
	if x != nil {
		return x.Whisper
	}
	return nil
}

func (x *WhisperNotification) GetSenderBattleTag() string {
	if x != nil && x.SenderBattleTag != nil {
		return *x.SenderBattleTag
	}
	return ""
}

type WhisperEchoNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId *v1.AccountId `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	Whisper      *Whisper      `protobuf:"bytes,2,opt,name=whisper" json:"whisper,omitempty"`
}

func (x *WhisperEchoNotification) Reset() {
	*x = WhisperEchoNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhisperEchoNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperEchoNotification) ProtoMessage() {}

func (x *WhisperEchoNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperEchoNotification.ProtoReflect.Descriptor instead.
func (*WhisperEchoNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{1}
}

func (x *WhisperEchoNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *WhisperEchoNotification) GetWhisper() *Whisper {
	if x != nil {
		return x.Whisper
	}
	return nil
}

type TypingIndicatorNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId *v1.AccountId             `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	SenderId     *v1.AccountId             `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	Action       *protocol.TypingIndicator `protobuf:"varint,3,opt,name=action,enum=bgs.protocol.TypingIndicator" json:"action,omitempty"`
}

func (x *TypingIndicatorNotification) Reset() {
	*x = TypingIndicatorNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingIndicatorNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingIndicatorNotification) ProtoMessage() {}

func (x *TypingIndicatorNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingIndicatorNotification.ProtoReflect.Descriptor instead.
func (*TypingIndicatorNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{2}
}

func (x *TypingIndicatorNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *TypingIndicatorNotification) GetSenderId() *v1.AccountId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *TypingIndicatorNotification) GetAction() protocol.TypingIndicator {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return protocol.TypingIndicator(0)
}

type AdvanceViewTimeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId *v1.AccountId `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	SenderId     *v1.AccountId `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ViewTime     *uint64       `protobuf:"varint,3,opt,name=view_time,json=viewTime" json:"view_time,omitempty"`
}

func (x *AdvanceViewTimeNotification) Reset() {
	*x = AdvanceViewTimeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceViewTimeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceViewTimeNotification) ProtoMessage() {}

func (x *AdvanceViewTimeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceViewTimeNotification.ProtoReflect.Descriptor instead.
func (*AdvanceViewTimeNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{3}
}

func (x *AdvanceViewTimeNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *AdvanceViewTimeNotification) GetSenderId() *v1.AccountId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *AdvanceViewTimeNotification) GetViewTime() uint64 {
	if x != nil && x.ViewTime != nil {
		return *x.ViewTime
	}
	return 0
}

type WhisperUpdatedNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId *v1.AccountId `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	Whisper      *Whisper      `protobuf:"bytes,2,opt,name=whisper" json:"whisper,omitempty"`
}

func (x *WhisperUpdatedNotification) Reset() {
	*x = WhisperUpdatedNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhisperUpdatedNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperUpdatedNotification) ProtoMessage() {}

func (x *WhisperUpdatedNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperUpdatedNotification.ProtoReflect.Descriptor instead.
func (*WhisperUpdatedNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{4}
}

func (x *WhisperUpdatedNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *WhisperUpdatedNotification) GetWhisper() *Whisper {
	if x != nil {
		return x.Whisper
	}
	return nil
}

type AdvanceClearTimeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriberId *v1.AccountId `protobuf:"bytes,1,opt,name=subscriber_id,json=subscriberId" json:"subscriber_id,omitempty"`
	SenderId     *v1.AccountId `protobuf:"bytes,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	ClearTime    *uint64       `protobuf:"varint,3,opt,name=clear_time,json=clearTime" json:"clear_time,omitempty"`
}

func (x *AdvanceClearTimeNotification) Reset() {
	*x = AdvanceClearTimeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceClearTimeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceClearTimeNotification) ProtoMessage() {}

func (x *AdvanceClearTimeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_listener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceClearTimeNotification.ProtoReflect.Descriptor instead.
func (*AdvanceClearTimeNotification) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP(), []int{5}
}

func (x *AdvanceClearTimeNotification) GetSubscriberId() *v1.AccountId {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *AdvanceClearTimeNotification) GetSenderId() *v1.AccountId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *AdvanceClearTimeNotification) GetClearTime() uint64 {
	if x != nil && x.ClearTime != nil {
		return *x.ClearTime
	}
	return 0
}

var File_bgs_low_pb_client_whisper_listener_proto protoreflect.FileDescriptor

var file_bgs_low_pb_client_whisper_listener_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x25, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x67, 0x73, 0x2f,
	0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x13,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07,
	0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52,
	0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x61, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x45, 0x63, 0x68, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x07, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01,
	0x0a, 0x1a, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xe3, 0x04, 0x0a, 0x0f,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x09, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x5c, 0x0a, 0x0d, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x30, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x45, 0x63, 0x68, 0x6f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x12, 0x6a, 0x0a, 0x17, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12,
	0x64, 0x0a, 0x11, 0x4f, 0x6e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x62, 0x0a, 0x10, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x12, 0x66, 0x0a, 0x12, 0x4f, 0x6e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77,
	0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6a, 0x62, 0x72, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x78, 0x2f, 0x62, 0x6e, 0x65, 0x74, 0x2f, 0x62, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x31,
}

var (
	file_bgs_low_pb_client_whisper_listener_proto_rawDescOnce sync.Once
	file_bgs_low_pb_client_whisper_listener_proto_rawDescData = file_bgs_low_pb_client_whisper_listener_proto_rawDesc
)

func file_bgs_low_pb_client_whisper_listener_proto_rawDescGZIP() []byte {
	file_bgs_low_pb_client_whisper_listener_proto_rawDescOnce.Do(func() {
		file_bgs_low_pb_client_whisper_listener_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgs_low_pb_client_whisper_listener_proto_rawDescData)
	})
	return file_bgs_low_pb_client_whisper_listener_proto_rawDescData
}

var file_bgs_low_pb_client_whisper_listener_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bgs_low_pb_client_whisper_listener_proto_goTypes = []interface{}{
	(*WhisperNotification)(nil),          // 0: bgs.protocol.whisper.v1.WhisperNotification
	(*WhisperEchoNotification)(nil),      // 1: bgs.protocol.whisper.v1.WhisperEchoNotification
	(*TypingIndicatorNotification)(nil),  // 2: bgs.protocol.whisper.v1.TypingIndicatorNotification
	(*AdvanceViewTimeNotification)(nil),  // 3: bgs.protocol.whisper.v1.AdvanceViewTimeNotification
	(*WhisperUpdatedNotification)(nil),   // 4: bgs.protocol.whisper.v1.WhisperUpdatedNotification
	(*AdvanceClearTimeNotification)(nil), // 5: bgs.protocol.whisper.v1.AdvanceClearTimeNotification
	(*v1.AccountId)(nil),                 // 6: bgs.protocol.account.v1.AccountId
	(*Whisper)(nil),                      // 7: bgs.protocol.whisper.v1.Whisper
	(protocol.TypingIndicator)(0),        // 8: bgs.protocol.TypingIndicator
	(*protocol.NO_RESPONSE)(nil),         // 9: bgs.protocol.NO_RESPONSE
}
var file_bgs_low_pb_client_whisper_listener_proto_depIdxs = []int32{
	6,  // 0: bgs.protocol.whisper.v1.WhisperNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	7,  // 1: bgs.protocol.whisper.v1.WhisperNotification.whisper:type_name -> bgs.protocol.whisper.v1.Whisper
	6,  // 2: bgs.protocol.whisper.v1.WhisperEchoNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	7,  // 3: bgs.protocol.whisper.v1.WhisperEchoNotification.whisper:type_name -> bgs.protocol.whisper.v1.Whisper
	6,  // 4: bgs.protocol.whisper.v1.TypingIndicatorNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	6,  // 5: bgs.protocol.whisper.v1.TypingIndicatorNotification.sender_id:type_name -> bgs.protocol.account.v1.AccountId
	8,  // 6: bgs.protocol.whisper.v1.TypingIndicatorNotification.action:type_name -> bgs.protocol.TypingIndicator
	6,  // 7: bgs.protocol.whisper.v1.AdvanceViewTimeNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	6,  // 8: bgs.protocol.whisper.v1.AdvanceViewTimeNotification.sender_id:type_name -> bgs.protocol.account.v1.AccountId
	6,  // 9: bgs.protocol.whisper.v1.WhisperUpdatedNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	7,  // 10: bgs.protocol.whisper.v1.WhisperUpdatedNotification.whisper:type_name -> bgs.protocol.whisper.v1.Whisper
	6,  // 11: bgs.protocol.whisper.v1.AdvanceClearTimeNotification.subscriber_id:type_name -> bgs.protocol.account.v1.AccountId
	6,  // 12: bgs.protocol.whisper.v1.AdvanceClearTimeNotification.sender_id:type_name -> bgs.protocol.account.v1.AccountId
	0,  // 13: bgs.protocol.whisper.v1.WhisperListener.OnWhisper:input_type -> bgs.protocol.whisper.v1.WhisperNotification
	1,  // 14: bgs.protocol.whisper.v1.WhisperListener.OnWhisperEcho:input_type -> bgs.protocol.whisper.v1.WhisperEchoNotification
	2,  // 15: bgs.protocol.whisper.v1.WhisperListener.OnTypingIndicatorUpdate:input_type -> bgs.protocol.whisper.v1.TypingIndicatorNotification
	3,  // 16: bgs.protocol.whisper.v1.WhisperListener.OnAdvanceViewTime:input_type -> bgs.protocol.whisper.v1.AdvanceViewTimeNotification
	4,  // 17: bgs.protocol.whisper.v1.WhisperListener.OnWhisperUpdated:input_type -> bgs.protocol.whisper.v1.WhisperUpdatedNotification
	5,  // 18: bgs.protocol.whisper.v1.WhisperListener.OnAdvanceClearTime:input_type -> bgs.protocol.whisper.v1.AdvanceClearTimeNotification
	9,  // 19: bgs.protocol.whisper.v1.WhisperListener.OnWhisper:output_type -> bgs.protocol.NO_RESPONSE
	9,  // 20: bgs.protocol.whisper.v1.WhisperListener.OnWhisperEcho:output_type -> bgs.protocol.NO_RESPONSE
	9,  // 21: bgs.protocol.whisper.v1.WhisperListener.OnTypingIndicatorUpdate:output_type -> bgs.protocol.NO_RESPONSE
	9,  // 22: bgs.protocol.whisper.v1.WhisperListener.OnAdvanceViewTime:output_type -> bgs.protocol.NO_RESPONSE
	9,  // 23: bgs.protocol.whisper.v1.WhisperListener.OnWhisperUpdated:output_type -> bgs.protocol.NO_RESPONSE
	9,  // 24: bgs.protocol.whisper.v1.WhisperListener.OnAdvanceClearTime:output_type -> bgs.protocol.NO_RESPONSE
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bgs_low_pb_client_whisper_listener_proto_init() }
func file_bgs_low_pb_client_whisper_listener_proto_init() {
	if File_bgs_low_pb_client_whisper_listener_proto != nil {
		return
	}
	file_bgs_low_pb_client_whisper_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhisperNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhisperEchoNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingIndicatorNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceViewTimeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhisperUpdatedNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_listener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceClearTimeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgs_low_pb_client_whisper_listener_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bgs_low_pb_client_whisper_listener_proto_goTypes,
		DependencyIndexes: file_bgs_low_pb_client_whisper_listener_proto_depIdxs,
		MessageInfos:      file_bgs_low_pb_client_whisper_listener_proto_msgTypes,
	}.Build()
	File_bgs_low_pb_client_whisper_listener_proto = out.File
	file_bgs_low_pb_client_whisper_listener_proto_rawDesc = nil
	file_bgs_low_pb_client_whisper_listener_proto_goTypes = nil
	file_bgs_low_pb_client_whisper_listener_proto_depIdxs = nil
}
