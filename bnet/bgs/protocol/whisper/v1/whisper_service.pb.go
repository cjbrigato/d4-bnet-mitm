// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: bgs/low/pb/client/whisper_service.proto

package v1

import (
	protocol "github.com/cjbrigato/logprox/bnet/bgs/protocol"
	v1 "github.com/cjbrigato/logprox/bnet/bgs/protocol/account/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *v1.AccountId `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View []*WhisperView `protobuf:"bytes,1,rep,name=view" json:"view,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeResponse) GetView() []*WhisperView {
	if x != nil {
		return x.View
	}
	return nil
}

type UnsubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *v1.AccountId `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{2}
}

func (x *UnsubscribeRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type SendWhisperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *v1.AccountId `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Whisper *SendOptions  `protobuf:"bytes,2,opt,name=whisper" json:"whisper,omitempty"`
}

func (x *SendWhisperRequest) Reset() {
	*x = SendWhisperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWhisperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWhisperRequest) ProtoMessage() {}

func (x *SendWhisperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWhisperRequest.ProtoReflect.Descriptor instead.
func (*SendWhisperRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{3}
}

func (x *SendWhisperRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SendWhisperRequest) GetWhisper() *SendOptions {
	if x != nil {
		return x.Whisper
	}
	return nil
}

type SendWhisperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whisper *Whisper `protobuf:"bytes,1,opt,name=whisper" json:"whisper,omitempty"`
}

func (x *SendWhisperResponse) Reset() {
	*x = SendWhisperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWhisperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWhisperResponse) ProtoMessage() {}

func (x *SendWhisperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWhisperResponse.ProtoReflect.Descriptor instead.
func (*SendWhisperResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{4}
}

func (x *SendWhisperResponse) GetWhisper() *Whisper {
	if x != nil {
		return x.Whisper
	}
	return nil
}

type SetTypingIndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId  *v1.AccountId             `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TargetId *v1.AccountId             `protobuf:"bytes,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	Action   *protocol.TypingIndicator `protobuf:"varint,3,opt,name=action,enum=bgs.protocol.TypingIndicator" json:"action,omitempty"`
}

func (x *SetTypingIndicatorRequest) Reset() {
	*x = SetTypingIndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypingIndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypingIndicatorRequest) ProtoMessage() {}

func (x *SetTypingIndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypingIndicatorRequest.ProtoReflect.Descriptor instead.
func (*SetTypingIndicatorRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{5}
}

func (x *SetTypingIndicatorRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *SetTypingIndicatorRequest) GetTargetId() *v1.AccountId {
	if x != nil {
		return x.TargetId
	}
	return nil
}

func (x *SetTypingIndicatorRequest) GetAction() protocol.TypingIndicator {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return protocol.TypingIndicator(0)
}

type AdvanceViewTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId  *v1.AccountId `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TargetId *v1.AccountId `protobuf:"bytes,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

func (x *AdvanceViewTimeRequest) Reset() {
	*x = AdvanceViewTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceViewTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceViewTimeRequest) ProtoMessage() {}

func (x *AdvanceViewTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceViewTimeRequest.ProtoReflect.Descriptor instead.
func (*AdvanceViewTimeRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{6}
}

func (x *AdvanceViewTimeRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *AdvanceViewTimeRequest) GetTargetId() *v1.AccountId {
	if x != nil {
		return x.TargetId
	}
	return nil
}

type AdvanceClearTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId  *v1.AccountId `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TargetId *v1.AccountId `protobuf:"bytes,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

func (x *AdvanceClearTimeRequest) Reset() {
	*x = AdvanceClearTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvanceClearTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvanceClearTimeRequest) ProtoMessage() {}

func (x *AdvanceClearTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvanceClearTimeRequest.ProtoReflect.Descriptor instead.
func (*AdvanceClearTimeRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{7}
}

func (x *AdvanceClearTimeRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *AdvanceClearTimeRequest) GetTargetId() *v1.AccountId {
	if x != nil {
		return x.TargetId
	}
	return nil
}

type GetWhisperMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId  *v1.AccountId             `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TargetId *v1.AccountId             `protobuf:"bytes,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	Options  *protocol.GetEventOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
}

func (x *GetWhisperMessagesRequest) Reset() {
	*x = GetWhisperMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWhisperMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWhisperMessagesRequest) ProtoMessage() {}

func (x *GetWhisperMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWhisperMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetWhisperMessagesRequest) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetWhisperMessagesRequest) GetAgentId() *v1.AccountId {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *GetWhisperMessagesRequest) GetTargetId() *v1.AccountId {
	if x != nil {
		return x.TargetId
	}
	return nil
}

func (x *GetWhisperMessagesRequest) GetOptions() *protocol.GetEventOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetWhisperMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whisper      []*Whisper `protobuf:"bytes,1,rep,name=whisper" json:"whisper,omitempty"`
	Continuation *uint64    `protobuf:"varint,2,opt,name=continuation" json:"continuation,omitempty"`
}

func (x *GetWhisperMessagesResponse) Reset() {
	*x = GetWhisperMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWhisperMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWhisperMessagesResponse) ProtoMessage() {}

func (x *GetWhisperMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgs_low_pb_client_whisper_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWhisperMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetWhisperMessagesResponse) Descriptor() ([]byte, []int) {
	return file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetWhisperMessagesResponse) GetWhisper() []*Whisper {
	if x != nil {
		return x.Whisper
	}
	return nil
}

func (x *GetWhisperMessagesResponse) GetContinuation() uint64 {
	if x != nil && x.Continuation != nil {
		return *x.Continuation
	}
	return 0
}

var File_bgs_low_pb_client_whisper_service_proto protoreflect.FileDescriptor

var file_bgs_low_pb_client_whisper_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x25, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x67, 0x73, 0x2f, 0x6c,
	0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x67,
	0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x62, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62,
	0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x53, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x12,
	0x53, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x77, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x07, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x22, 0xd2, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x22, 0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x52, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xc5, 0x05, 0x0a, 0x0e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2b, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x2e,
	0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69,
	0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x0f, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x62, 0x67,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6a, 0x62, 0x72,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x78, 0x2f, 0x62, 0x6e,
	0x65, 0x74, 0x2f, 0x62, 0x67, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x2f, 0x76, 0x31,
}

var (
	file_bgs_low_pb_client_whisper_service_proto_rawDescOnce sync.Once
	file_bgs_low_pb_client_whisper_service_proto_rawDescData = file_bgs_low_pb_client_whisper_service_proto_rawDesc
)

func file_bgs_low_pb_client_whisper_service_proto_rawDescGZIP() []byte {
	file_bgs_low_pb_client_whisper_service_proto_rawDescOnce.Do(func() {
		file_bgs_low_pb_client_whisper_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgs_low_pb_client_whisper_service_proto_rawDescData)
	})
	return file_bgs_low_pb_client_whisper_service_proto_rawDescData
}

var file_bgs_low_pb_client_whisper_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bgs_low_pb_client_whisper_service_proto_goTypes = []interface{}{
	(*SubscribeRequest)(nil),           // 0: bgs.protocol.whisper.v1.SubscribeRequest
	(*SubscribeResponse)(nil),          // 1: bgs.protocol.whisper.v1.SubscribeResponse
	(*UnsubscribeRequest)(nil),         // 2: bgs.protocol.whisper.v1.UnsubscribeRequest
	(*SendWhisperRequest)(nil),         // 3: bgs.protocol.whisper.v1.SendWhisperRequest
	(*SendWhisperResponse)(nil),        // 4: bgs.protocol.whisper.v1.SendWhisperResponse
	(*SetTypingIndicatorRequest)(nil),  // 5: bgs.protocol.whisper.v1.SetTypingIndicatorRequest
	(*AdvanceViewTimeRequest)(nil),     // 6: bgs.protocol.whisper.v1.AdvanceViewTimeRequest
	(*AdvanceClearTimeRequest)(nil),    // 7: bgs.protocol.whisper.v1.AdvanceClearTimeRequest
	(*GetWhisperMessagesRequest)(nil),  // 8: bgs.protocol.whisper.v1.GetWhisperMessagesRequest
	(*GetWhisperMessagesResponse)(nil), // 9: bgs.protocol.whisper.v1.GetWhisperMessagesResponse
	(*v1.AccountId)(nil),               // 10: bgs.protocol.account.v1.AccountId
	(*WhisperView)(nil),                // 11: bgs.protocol.whisper.v1.WhisperView
	(*SendOptions)(nil),                // 12: bgs.protocol.whisper.v1.SendOptions
	(*Whisper)(nil),                    // 13: bgs.protocol.whisper.v1.Whisper
	(protocol.TypingIndicator)(0),      // 14: bgs.protocol.TypingIndicator
	(*protocol.GetEventOptions)(nil),   // 15: bgs.protocol.GetEventOptions
	(*protocol.NoData)(nil),            // 16: bgs.protocol.NoData
}
var file_bgs_low_pb_client_whisper_service_proto_depIdxs = []int32{
	10, // 0: bgs.protocol.whisper.v1.SubscribeRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	11, // 1: bgs.protocol.whisper.v1.SubscribeResponse.view:type_name -> bgs.protocol.whisper.v1.WhisperView
	10, // 2: bgs.protocol.whisper.v1.UnsubscribeRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 3: bgs.protocol.whisper.v1.SendWhisperRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	12, // 4: bgs.protocol.whisper.v1.SendWhisperRequest.whisper:type_name -> bgs.protocol.whisper.v1.SendOptions
	13, // 5: bgs.protocol.whisper.v1.SendWhisperResponse.whisper:type_name -> bgs.protocol.whisper.v1.Whisper
	10, // 6: bgs.protocol.whisper.v1.SetTypingIndicatorRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 7: bgs.protocol.whisper.v1.SetTypingIndicatorRequest.target_id:type_name -> bgs.protocol.account.v1.AccountId
	14, // 8: bgs.protocol.whisper.v1.SetTypingIndicatorRequest.action:type_name -> bgs.protocol.TypingIndicator
	10, // 9: bgs.protocol.whisper.v1.AdvanceViewTimeRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 10: bgs.protocol.whisper.v1.AdvanceViewTimeRequest.target_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 11: bgs.protocol.whisper.v1.AdvanceClearTimeRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 12: bgs.protocol.whisper.v1.AdvanceClearTimeRequest.target_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 13: bgs.protocol.whisper.v1.GetWhisperMessagesRequest.agent_id:type_name -> bgs.protocol.account.v1.AccountId
	10, // 14: bgs.protocol.whisper.v1.GetWhisperMessagesRequest.target_id:type_name -> bgs.protocol.account.v1.AccountId
	15, // 15: bgs.protocol.whisper.v1.GetWhisperMessagesRequest.options:type_name -> bgs.protocol.GetEventOptions
	13, // 16: bgs.protocol.whisper.v1.GetWhisperMessagesResponse.whisper:type_name -> bgs.protocol.whisper.v1.Whisper
	0,  // 17: bgs.protocol.whisper.v1.WhisperService.Subscribe:input_type -> bgs.protocol.whisper.v1.SubscribeRequest
	2,  // 18: bgs.protocol.whisper.v1.WhisperService.Unsubscribe:input_type -> bgs.protocol.whisper.v1.UnsubscribeRequest
	3,  // 19: bgs.protocol.whisper.v1.WhisperService.SendWhisper:input_type -> bgs.protocol.whisper.v1.SendWhisperRequest
	5,  // 20: bgs.protocol.whisper.v1.WhisperService.SetTypingIndicator:input_type -> bgs.protocol.whisper.v1.SetTypingIndicatorRequest
	6,  // 21: bgs.protocol.whisper.v1.WhisperService.AdvanceViewTime:input_type -> bgs.protocol.whisper.v1.AdvanceViewTimeRequest
	8,  // 22: bgs.protocol.whisper.v1.WhisperService.GetWhisperMessages:input_type -> bgs.protocol.whisper.v1.GetWhisperMessagesRequest
	7,  // 23: bgs.protocol.whisper.v1.WhisperService.AdvanceClearTime:input_type -> bgs.protocol.whisper.v1.AdvanceClearTimeRequest
	1,  // 24: bgs.protocol.whisper.v1.WhisperService.Subscribe:output_type -> bgs.protocol.whisper.v1.SubscribeResponse
	16, // 25: bgs.protocol.whisper.v1.WhisperService.Unsubscribe:output_type -> bgs.protocol.NoData
	4,  // 26: bgs.protocol.whisper.v1.WhisperService.SendWhisper:output_type -> bgs.protocol.whisper.v1.SendWhisperResponse
	16, // 27: bgs.protocol.whisper.v1.WhisperService.SetTypingIndicator:output_type -> bgs.protocol.NoData
	16, // 28: bgs.protocol.whisper.v1.WhisperService.AdvanceViewTime:output_type -> bgs.protocol.NoData
	9,  // 29: bgs.protocol.whisper.v1.WhisperService.GetWhisperMessages:output_type -> bgs.protocol.whisper.v1.GetWhisperMessagesResponse
	16, // 30: bgs.protocol.whisper.v1.WhisperService.AdvanceClearTime:output_type -> bgs.protocol.NoData
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_bgs_low_pb_client_whisper_service_proto_init() }
func file_bgs_low_pb_client_whisper_service_proto_init() {
	if File_bgs_low_pb_client_whisper_service_proto != nil {
		return
	}
	file_bgs_low_pb_client_whisper_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWhisperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWhisperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypingIndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceViewTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvanceClearTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWhisperMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgs_low_pb_client_whisper_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWhisperMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgs_low_pb_client_whisper_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bgs_low_pb_client_whisper_service_proto_goTypes,
		DependencyIndexes: file_bgs_low_pb_client_whisper_service_proto_depIdxs,
		MessageInfos:      file_bgs_low_pb_client_whisper_service_proto_msgTypes,
	}.Build()
	File_bgs_low_pb_client_whisper_service_proto = out.File
	file_bgs_low_pb_client_whisper_service_proto_rawDesc = nil
	file_bgs_low_pb_client_whisper_service_proto_goTypes = nil
	file_bgs_low_pb_client_whisper_service_proto_depIdxs = nil
}
